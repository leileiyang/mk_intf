/*
*	New C++ File starts here.
*	This file should be named emc_nml.cc
*	Automatically generated by NML CodeGen Java Applet.
*	with command line arguments :  update_with_name=true select_from_all_files=true HHFile=/home/leiyang/playground/mk_intf/src/emcpos.h HHFile=/home/leiyang/playground/mk_intf/src/emctool.h HHFile=/home/leiyang/playground/mk_intf/src/emc_nml.hh -o /home/leiyang/playground/mk_intf/src/emc_nml.cc
*
*	.gen script :
*		0:load /home/leiyang/playground/mk_intf/src/emcpos.h
*		1:load /home/leiyang/playground/mk_intf/src/emctool.h
*		2:load /home/leiyang/playground/mk_intf/src/emc_nml.hh
*		3:select_from_all
*		4:generate C++ format>/home/leiyang/playground/mk_intf/src/emc_nml.cc
*		5:generate C++ update>/home/leiyang/playground/mk_intf/src/emc_nml.cc
*		6:generate C++ constructor>/home/leiyang/playground/mk_intf/src/emc_nml.cc
*		7:exit
*
*/

// Include all NML, CMS, and RCS classes and functions
#include "rcs.hh"

// Include command and status message definitions
#include "emcpos.h"
#include "emctool.h"
#include "emc_nml.hh"
#include "emc.hh"
#include "nml_type.hh"
#include "motion_types.h"
#include "depend_struct.hh"

// Forward Function Prototypes
void nmlupdate(CMS *cms, EmcPose *x);
void initialize_EmcPose(EmcPose *x);
void nmlupdate(CMS *cms, CANON_TOOL_TABLE *x);
void initialize_CANON_TOOL_TABLE(CANON_TOOL_TABLE *x);
void nmlupdate(CMS *cms, PmCartesian *x);
void initialize_PmCartesian(PmCartesian *x);
void nmlupdate(CMS *cms, PLANE_POINT *x);
void initialize_PLANE_POINT(PLANE_POINT *x);
void nmlupdate(CMS *cms, CONTROL_POINT *x);
void initialize_CONTROL_POINT(CONTROL_POINT *x);
void nmlupdate(CMS *cms, CANON_VECTOR *x);


#ifndef MAX_EMCNAME_LENGTH
#define MAX_EMCNAME_LENGTH 34
#endif
#ifndef EMCNAME_LIST_LENGTH
#define EMCNAME_LIST_LENGTH 143
#endif


/* This list must be in alphabetical order and the three lists must correspond. */
const char emcname_list[EMCNAME_LIST_LENGTH][MAX_EMCNAME_LENGTH]= {
	"EMC_ABORT", /* 3,1903 */
	"EMC_AUX_ESTOP_OFF", /* 5,1207 */
	"EMC_AUX_ESTOP_ON", /* 6,1206 */
	"EMC_AUX_ESTOP_RESET", /* 7,1208 */
	"EMC_AUX_INPUT_WAIT", /* 8,1209 */
	"EMC_AUX_STAT", /* 9,1299 */
	"EMC_AXIS_ABORT", /* 11,120 */
	"EMC_AXIS_ABS_JOG", /* 12,126 */
	"EMC_AXIS_ACTIVATE", /* 13,127 */
	"EMC_AXIS_DEACTIVATE", /* 15,128 */
	"EMC_AXIS_DISABLE", /* 16,122 */
	"EMC_AXIS_ENABLE", /* 17,121 */
	"EMC_AXIS_HALT", /* 18,119 */
	"EMC_AXIS_HOME", /* 19,123 */
	"EMC_AXIS_INCR_JOG", /* 20,125 */
	"EMC_AXIS_INIT", /* 21,118 */
	"EMC_AXIS_JOG", /* 22,124 */
	"EMC_AXIS_LOAD_COMP", /* 23,131 */
	"EMC_AXIS_OVERRIDE_LIMITS", /* 24,129 */
	"EMC_AXIS_SET_AXIS", /* 25,101 */
	"EMC_AXIS_SET_BACKLASH", /* 26,134 */
	"EMC_AXIS_SET_FERROR", /* 27,111 */
	"EMC_AXIS_SET_HOMING_PARAMS", /* 28,112 */
	"EMC_AXIS_SET_MAX_POSITION_LIMIT", /* 29,108 */
	"EMC_AXIS_SET_MAX_VELOCITY", /* 30,116 */
	"EMC_AXIS_SET_MIN_FERROR", /* 31,115 */
	"EMC_AXIS_SET_MIN_POSITION_LIMIT", /* 32,107 */
	"EMC_AXIS_SET_UNITS", /* 33,102 */
	"EMC_AXIS_STAT", /* 34,199 */
	"EMC_AXIS_UNHOME", /* 36,135 */
	"EMC_COOLANT_FLOOD_OFF", /* 39,1407 */
	"EMC_COOLANT_FLOOD_ON", /* 40,1406 */
	"EMC_COOLANT_MIST_OFF", /* 41,1405 */
	"EMC_COOLANT_MIST_ON", /* 42,1404 */
	"EMC_COOLANT_STAT", /* 43,1499 */
	"EMC_EXEC_PLUGIN_CALL", /* 45,1112 */
	"EMC_HALT", /* 46,1902 */
	"EMC_INIT", /* 47,1901 */
	"EMC_IO_ABORT", /* 48,1603 */
	"EMC_IO_HALT", /* 50,1602 */
	"EMC_IO_INIT", /* 51,1601 */
	"EMC_IO_PLUGIN_CALL", /* 52,1113 */
	"EMC_IO_SET_CYCLE_TIME", /* 53,1604 */
	"EMC_IO_STAT", /* 54,1699 */
	"EMC_LUBE_OFF", /* 57,1505 */
	"EMC_LUBE_ON", /* 58,1504 */
	"EMC_LUBE_STAT", /* 59,1599 */
	"EMC_MOTION_ABORT", /* 61,303 */
	"EMC_MOTION_ADAPTIVE", /* 62,306 */
	"EMC_MOTION_HALT", /* 64,302 */
	"EMC_MOTION_INIT", /* 65,301 */
	"EMC_MOTION_SET_AOUT", /* 66,304 */
	"EMC_MOTION_SET_DOUT", /* 67,305 */
	"EMC_MOTION_STAT", /* 68,399 */
	"EMC_NULL", /* 70,21 */
	"EMC_OPERATOR_DISPLAY", /* 71,13 */
	"EMC_OPERATOR_ERROR", /* 72,11 */
	"EMC_OPERATOR_TEXT", /* 73,12 */
	"EMC_SET_DEBUG", /* 74,22 */
	"EMC_SPINDLE_BRAKE_ENGAGE", /* 75,1313 */
	"EMC_SPINDLE_BRAKE_RELEASE", /* 76,1312 */
	"EMC_SPINDLE_CONSTANT", /* 78,1311 */
	"EMC_SPINDLE_DECREASE", /* 79,1310 */
	"EMC_SPINDLE_INCREASE", /* 80,1309 */
	"EMC_SPINDLE_OFF", /* 81,1305 */
	"EMC_SPINDLE_ON", /* 82,1304 */
	"EMC_SPINDLE_ORIENT", /* 83,1317 */
	"EMC_SPINDLE_SPEED", /* 84,1316 */
	"EMC_SPINDLE_STAT", /* 85,1399 */
	"EMC_SPINDLE_WAIT_ORIENT_COMPLETE", /* 87,1318 */
	"EMC_STAT", /* 88,1999 */
	"EMC_SYSTEM_CMD", /* 90,30 */
	"EMC_TASK_ABORT", /* 91,503 */
	"EMC_TASK_HALT", /* 93,502 */
	"EMC_TASK_INIT", /* 94,501 */
	"EMC_TASK_PLAN_CLOSE", /* 95,514 */
	"EMC_TASK_PLAN_END", /* 96,513 */
	"EMC_TASK_PLAN_EXECUTE", /* 97,509 */
	"EMC_TASK_PLAN_INIT", /* 98,515 */
	"EMC_TASK_PLAN_OPEN", /* 99,506 */
	"EMC_TASK_PLAN_OPTIONAL_STOP", /* 100,519 */
	"EMC_TASK_PLAN_PAUSE", /* 101,510 */
	"EMC_TASK_PLAN_READ", /* 102,508 */
	"EMC_TASK_PLAN_RESUME", /* 103,512 */
	"EMC_TASK_PLAN_RUN", /* 104,507 */
	"EMC_TASK_PLAN_SET_BLOCK_DELETE", /* 105,518 */
	"EMC_TASK_PLAN_SET_OPTIONAL_STOP", /* 106,517 */
	"EMC_TASK_PLAN_STEP", /* 107,511 */
	"EMC_TASK_PLAN_SYNCH", /* 108,516 */
	"EMC_TASK_SET_MODE", /* 109,504 */
	"EMC_TASK_SET_STATE", /* 110,505 */
	"EMC_TASK_STAT", /* 111,599 */
	"EMC_TOOL_ABORT", /* 113,1103 */
	"EMC_TOOL_HALT", /* 115,1102 */
	"EMC_TOOL_INIT", /* 116,1101 */
	"EMC_TOOL_LOAD", /* 117,1105 */
	"EMC_TOOL_LOAD_TOOL_TABLE", /* 118,1107 */
	"EMC_TOOL_PREPARE", /* 119,1104 */
	"EMC_TOOL_SET_NUMBER", /* 120,1109 */
	"EMC_TOOL_SET_OFFSET", /* 121,1108 */
	"EMC_TOOL_START_CHANGE", /* 122,1110 */
	"EMC_TOOL_STAT", /* 123,1199 */
	"EMC_TOOL_UNLOAD", /* 125,1106 */
	"EMC_TRAJ_ABORT", /* 126,215 */
	"EMC_TRAJ_CIRCULAR_MOVE", /* 127,221 */
	"EMC_TRAJ_CLEAR_PROBE_TRIPPED_FLAG", /* 128,228 */
	"EMC_TRAJ_DELAY", /* 130,219 */
	"EMC_TRAJ_DISABLE", /* 131,214 */
	"EMC_TRAJ_ENABLE", /* 132,213 */
	"EMC_TRAJ_HALT", /* 133,212 */
	"EMC_TRAJ_INIT", /* 134,211 */
	"EMC_TRAJ_LINEAR_MOVE", /* 135,220 */
	"EMC_TRAJ_PAUSE", /* 136,216 */
	"EMC_TRAJ_PROBE", /* 137,229 */
	"EMC_TRAJ_RESUME", /* 138,218 */
	"EMC_TRAJ_RIGID_TAP", /* 139,237 */
	"EMC_TRAJ_SET_ACCELERATION", /* 140,206 */
	"EMC_TRAJ_SET_AXES", /* 141,201 */
	"EMC_TRAJ_SET_CYCLE_TIME", /* 142,203 */
	"EMC_TRAJ_SET_FH_ENABLE", /* 143,236 */
	"EMC_TRAJ_SET_FO_ENABLE", /* 144,234 */
	"EMC_TRAJ_SET_G5X", /* 145,224 */
	"EMC_TRAJ_SET_G92", /* 146,227 */
	"EMC_TRAJ_SET_HOME", /* 147,225 */
	"EMC_TRAJ_SET_MAX_ACCELERATION", /* 148,208 */
	"EMC_TRAJ_SET_MAX_VELOCITY", /* 149,207 */
	"EMC_TRAJ_SET_MODE", /* 150,204 */
	"EMC_TRAJ_SET_MOTION_ID", /* 151,210 */
	"EMC_TRAJ_SET_OFFSET", /* 152,223 */
	"EMC_TRAJ_SET_RAPID_SCALE", /* 153,238 */
	"EMC_TRAJ_SET_ROTATION", /* 154,226 */
	"EMC_TRAJ_SET_SCALE", /* 155,209 */
	"EMC_TRAJ_SET_SO_ENABLE", /* 156,235 */
	"EMC_TRAJ_SET_SPINDLESYNC", /* 157,232 */
	"EMC_TRAJ_SET_SPINDLE_SCALE", /* 158,233 */
	"EMC_TRAJ_SET_TELEOP_ENABLE", /* 159,230 */
	"EMC_TRAJ_SET_TELEOP_VECTOR", /* 160,231 */
	"EMC_TRAJ_SET_TERM_COND", /* 161,222 */
	"EMC_TRAJ_SET_UNITS", /* 162,202 */
	"EMC_TRAJ_SET_VELOCITY", /* 163,205 */
	"EMC_TRAJ_STAT", /* 164,299 */
	"EMC_TRAJ_STEP", /* 166,217 */
	""};
const NMLTYPE emcid_list[EMCNAME_LIST_LENGTH]= {
	EMC_ABORT_TYPE, /* 3,1903 */
	EMC_AUX_ESTOP_OFF_TYPE, /* 5,1207 */
	EMC_AUX_ESTOP_ON_TYPE, /* 6,1206 */
	EMC_AUX_ESTOP_RESET_TYPE, /* 7,1208 */
	EMC_AUX_INPUT_WAIT_TYPE, /* 8,1209 */
	EMC_AUX_STAT_TYPE, /* 9,1299 */
	EMC_AXIS_ABORT_TYPE, /* 11,120 */
	EMC_AXIS_ABS_JOG_TYPE, /* 12,126 */
	EMC_AXIS_ACTIVATE_TYPE, /* 13,127 */
	EMC_AXIS_DEACTIVATE_TYPE, /* 15,128 */
	EMC_AXIS_DISABLE_TYPE, /* 16,122 */
	EMC_AXIS_ENABLE_TYPE, /* 17,121 */
	EMC_AXIS_HALT_TYPE, /* 18,119 */
	EMC_AXIS_HOME_TYPE, /* 19,123 */
	EMC_AXIS_INCR_JOG_TYPE, /* 20,125 */
	EMC_AXIS_INIT_TYPE, /* 21,118 */
	EMC_AXIS_JOG_TYPE, /* 22,124 */
	EMC_AXIS_LOAD_COMP_TYPE, /* 23,131 */
	EMC_AXIS_OVERRIDE_LIMITS_TYPE, /* 24,129 */
	EMC_AXIS_SET_AXIS_TYPE, /* 25,101 */
	EMC_AXIS_SET_BACKLASH_TYPE, /* 26,134 */
	EMC_AXIS_SET_FERROR_TYPE, /* 27,111 */
	EMC_AXIS_SET_HOMING_PARAMS_TYPE, /* 28,112 */
	EMC_AXIS_SET_MAX_POSITION_LIMIT_TYPE, /* 29,108 */
	EMC_AXIS_SET_MAX_VELOCITY_TYPE, /* 30,116 */
	EMC_AXIS_SET_MIN_FERROR_TYPE, /* 31,115 */
	EMC_AXIS_SET_MIN_POSITION_LIMIT_TYPE, /* 32,107 */
	EMC_AXIS_SET_UNITS_TYPE, /* 33,102 */
	EMC_AXIS_STAT_TYPE, /* 34,199 */
	EMC_AXIS_UNHOME_TYPE, /* 36,135 */
	EMC_COOLANT_FLOOD_OFF_TYPE, /* 39,1407 */
	EMC_COOLANT_FLOOD_ON_TYPE, /* 40,1406 */
	EMC_COOLANT_MIST_OFF_TYPE, /* 41,1405 */
	EMC_COOLANT_MIST_ON_TYPE, /* 42,1404 */
	EMC_COOLANT_STAT_TYPE, /* 43,1499 */
	EMC_EXEC_PLUGIN_CALL_TYPE, /* 45,1112 */
	EMC_HALT_TYPE, /* 46,1902 */
	EMC_INIT_TYPE, /* 47,1901 */
	EMC_IO_ABORT_TYPE, /* 48,1603 */
	EMC_IO_HALT_TYPE, /* 50,1602 */
	EMC_IO_INIT_TYPE, /* 51,1601 */
	EMC_IO_PLUGIN_CALL_TYPE, /* 52,1113 */
	EMC_IO_SET_CYCLE_TIME_TYPE, /* 53,1604 */
	EMC_IO_STAT_TYPE, /* 54,1699 */
	EMC_LUBE_OFF_TYPE, /* 57,1505 */
	EMC_LUBE_ON_TYPE, /* 58,1504 */
	EMC_LUBE_STAT_TYPE, /* 59,1599 */
	EMC_MOTION_ABORT_TYPE, /* 61,303 */
	EMC_MOTION_ADAPTIVE_TYPE, /* 62,306 */
	EMC_MOTION_HALT_TYPE, /* 64,302 */
	EMC_MOTION_INIT_TYPE, /* 65,301 */
	EMC_MOTION_SET_AOUT_TYPE, /* 66,304 */
	EMC_MOTION_SET_DOUT_TYPE, /* 67,305 */
	EMC_MOTION_STAT_TYPE, /* 68,399 */
	EMC_NULL_TYPE, /* 70,21 */
	EMC_OPERATOR_DISPLAY_TYPE, /* 71,13 */
	EMC_OPERATOR_ERROR_TYPE, /* 72,11 */
	EMC_OPERATOR_TEXT_TYPE, /* 73,12 */
	EMC_SET_DEBUG_TYPE, /* 74,22 */
	EMC_SPINDLE_BRAKE_ENGAGE_TYPE, /* 75,1313 */
	EMC_SPINDLE_BRAKE_RELEASE_TYPE, /* 76,1312 */
	EMC_SPINDLE_CONSTANT_TYPE, /* 78,1311 */
	EMC_SPINDLE_DECREASE_TYPE, /* 79,1310 */
	EMC_SPINDLE_INCREASE_TYPE, /* 80,1309 */
	EMC_SPINDLE_OFF_TYPE, /* 81,1305 */
	EMC_SPINDLE_ON_TYPE, /* 82,1304 */
	EMC_SPINDLE_ORIENT_TYPE, /* 83,1317 */
	EMC_SPINDLE_SPEED_TYPE, /* 84,1316 */
	EMC_SPINDLE_STAT_TYPE, /* 85,1399 */
	EMC_SPINDLE_WAIT_ORIENT_COMPLETE_TYPE, /* 87,1318 */
	EMC_STAT_TYPE, /* 88,1999 */
	EMC_SYSTEM_CMD_TYPE, /* 90,30 */
	EMC_TASK_ABORT_TYPE, /* 91,503 */
	EMC_TASK_HALT_TYPE, /* 93,502 */
	EMC_TASK_INIT_TYPE, /* 94,501 */
	EMC_TASK_PLAN_CLOSE_TYPE, /* 95,514 */
	EMC_TASK_PLAN_END_TYPE, /* 96,513 */
	EMC_TASK_PLAN_EXECUTE_TYPE, /* 97,509 */
	EMC_TASK_PLAN_INIT_TYPE, /* 98,515 */
	EMC_TASK_PLAN_OPEN_TYPE, /* 99,506 */
	EMC_TASK_PLAN_OPTIONAL_STOP_TYPE, /* 100,519 */
	EMC_TASK_PLAN_PAUSE_TYPE, /* 101,510 */
	EMC_TASK_PLAN_READ_TYPE, /* 102,508 */
	EMC_TASK_PLAN_RESUME_TYPE, /* 103,512 */
	EMC_TASK_PLAN_RUN_TYPE, /* 104,507 */
	EMC_TASK_PLAN_SET_BLOCK_DELETE_TYPE, /* 105,518 */
	EMC_TASK_PLAN_SET_OPTIONAL_STOP_TYPE, /* 106,517 */
	EMC_TASK_PLAN_STEP_TYPE, /* 107,511 */
	EMC_TASK_PLAN_SYNCH_TYPE, /* 108,516 */
	EMC_TASK_SET_MODE_TYPE, /* 109,504 */
	EMC_TASK_SET_STATE_TYPE, /* 110,505 */
	EMC_TASK_STAT_TYPE, /* 111,599 */
	EMC_TOOL_ABORT_TYPE, /* 113,1103 */
	EMC_TOOL_HALT_TYPE, /* 115,1102 */
	EMC_TOOL_INIT_TYPE, /* 116,1101 */
	EMC_TOOL_LOAD_TYPE, /* 117,1105 */
	EMC_TOOL_LOAD_TOOL_TABLE_TYPE, /* 118,1107 */
	EMC_TOOL_PREPARE_TYPE, /* 119,1104 */
	EMC_TOOL_SET_NUMBER_TYPE, /* 120,1109 */
	EMC_TOOL_SET_OFFSET_TYPE, /* 121,1108 */
	EMC_TOOL_START_CHANGE_TYPE, /* 122,1110 */
	EMC_TOOL_STAT_TYPE, /* 123,1199 */
	EMC_TOOL_UNLOAD_TYPE, /* 125,1106 */
	EMC_TRAJ_ABORT_TYPE, /* 126,215 */
	EMC_TRAJ_CIRCULAR_MOVE_TYPE, /* 127,221 */
	EMC_TRAJ_CLEAR_PROBE_TRIPPED_FLAG_TYPE, /* 128,228 */
	EMC_TRAJ_DELAY_TYPE, /* 130,219 */
	EMC_TRAJ_DISABLE_TYPE, /* 131,214 */
	EMC_TRAJ_ENABLE_TYPE, /* 132,213 */
	EMC_TRAJ_HALT_TYPE, /* 133,212 */
	EMC_TRAJ_INIT_TYPE, /* 134,211 */
	EMC_TRAJ_LINEAR_MOVE_TYPE, /* 135,220 */
	EMC_TRAJ_PAUSE_TYPE, /* 136,216 */
	EMC_TRAJ_PROBE_TYPE, /* 137,229 */
	EMC_TRAJ_RESUME_TYPE, /* 138,218 */
	EMC_TRAJ_RIGID_TAP_TYPE, /* 139,237 */
	EMC_TRAJ_SET_ACCELERATION_TYPE, /* 140,206 */
	EMC_TRAJ_SET_AXES_TYPE, /* 141,201 */
	EMC_TRAJ_SET_CYCLE_TIME_TYPE, /* 142,203 */
	EMC_TRAJ_SET_FH_ENABLE_TYPE, /* 143,236 */
	EMC_TRAJ_SET_FO_ENABLE_TYPE, /* 144,234 */
	EMC_TRAJ_SET_G5X_TYPE, /* 145,224 */
	EMC_TRAJ_SET_G92_TYPE, /* 146,227 */
	EMC_TRAJ_SET_HOME_TYPE, /* 147,225 */
	EMC_TRAJ_SET_MAX_ACCELERATION_TYPE, /* 148,208 */
	EMC_TRAJ_SET_MAX_VELOCITY_TYPE, /* 149,207 */
	EMC_TRAJ_SET_MODE_TYPE, /* 150,204 */
	EMC_TRAJ_SET_MOTION_ID_TYPE, /* 151,210 */
	EMC_TRAJ_SET_OFFSET_TYPE, /* 152,223 */
	EMC_TRAJ_SET_RAPID_SCALE_TYPE, /* 153,238 */
	EMC_TRAJ_SET_ROTATION_TYPE, /* 154,226 */
	EMC_TRAJ_SET_SCALE_TYPE, /* 155,209 */
	EMC_TRAJ_SET_SO_ENABLE_TYPE, /* 156,235 */
	EMC_TRAJ_SET_SPINDLESYNC_TYPE, /* 157,232 */
	EMC_TRAJ_SET_SPINDLE_SCALE_TYPE, /* 158,233 */
	EMC_TRAJ_SET_TELEOP_ENABLE_TYPE, /* 159,230 */
	EMC_TRAJ_SET_TELEOP_VECTOR_TYPE, /* 160,231 */
	EMC_TRAJ_SET_TERM_COND_TYPE, /* 161,222 */
	EMC_TRAJ_SET_UNITS_TYPE, /* 162,202 */
	EMC_TRAJ_SET_VELOCITY_TYPE, /* 163,205 */
	EMC_TRAJ_STAT_TYPE, /* 164,299 */
	EMC_TRAJ_STEP_TYPE, /* 166,217 */
	-1};
const size_t emcsize_list[EMCNAME_LIST_LENGTH]= {
	sizeof(EMC_ABORT),
	sizeof(EMC_AUX_ESTOP_OFF),
	sizeof(EMC_AUX_ESTOP_ON),
	sizeof(EMC_AUX_ESTOP_RESET),
	sizeof(EMC_AUX_INPUT_WAIT),
	sizeof(EMC_AUX_STAT),
	sizeof(EMC_AXIS_ABORT),
	sizeof(EMC_AXIS_ABS_JOG),
	sizeof(EMC_AXIS_ACTIVATE),
	sizeof(EMC_AXIS_DEACTIVATE),
	sizeof(EMC_AXIS_DISABLE),
	sizeof(EMC_AXIS_ENABLE),
	sizeof(EMC_AXIS_HALT),
	sizeof(EMC_AXIS_HOME),
	sizeof(EMC_AXIS_INCR_JOG),
	sizeof(EMC_AXIS_INIT),
	sizeof(EMC_AXIS_JOG),
	sizeof(EMC_AXIS_LOAD_COMP),
	sizeof(EMC_AXIS_OVERRIDE_LIMITS),
	sizeof(EMC_AXIS_SET_AXIS),
	sizeof(EMC_AXIS_SET_BACKLASH),
	sizeof(EMC_AXIS_SET_FERROR),
	sizeof(EMC_AXIS_SET_HOMING_PARAMS),
	sizeof(EMC_AXIS_SET_MAX_POSITION_LIMIT),
	sizeof(EMC_AXIS_SET_MAX_VELOCITY),
	sizeof(EMC_AXIS_SET_MIN_FERROR),
	sizeof(EMC_AXIS_SET_MIN_POSITION_LIMIT),
	sizeof(EMC_AXIS_SET_UNITS),
	sizeof(EMC_AXIS_STAT),
	sizeof(EMC_AXIS_UNHOME),
	sizeof(EMC_COOLANT_FLOOD_OFF),
	sizeof(EMC_COOLANT_FLOOD_ON),
	sizeof(EMC_COOLANT_MIST_OFF),
	sizeof(EMC_COOLANT_MIST_ON),
	sizeof(EMC_COOLANT_STAT),
	sizeof(EMC_EXEC_PLUGIN_CALL),
	sizeof(EMC_HALT),
	sizeof(EMC_INIT),
	sizeof(EMC_IO_ABORT),
	sizeof(EMC_IO_HALT),
	sizeof(EMC_IO_INIT),
	sizeof(EMC_IO_PLUGIN_CALL),
	sizeof(EMC_IO_SET_CYCLE_TIME),
	sizeof(EMC_IO_STAT),
	sizeof(EMC_LUBE_OFF),
	sizeof(EMC_LUBE_ON),
	sizeof(EMC_LUBE_STAT),
	sizeof(EMC_MOTION_ABORT),
	sizeof(EMC_MOTION_ADAPTIVE),
	sizeof(EMC_MOTION_HALT),
	sizeof(EMC_MOTION_INIT),
	sizeof(EMC_MOTION_SET_AOUT),
	sizeof(EMC_MOTION_SET_DOUT),
	sizeof(EMC_MOTION_STAT),
	sizeof(EMC_NULL),
	sizeof(EMC_OPERATOR_DISPLAY),
	sizeof(EMC_OPERATOR_ERROR),
	sizeof(EMC_OPERATOR_TEXT),
	sizeof(EMC_SET_DEBUG),
	sizeof(EMC_SPINDLE_BRAKE_ENGAGE),
	sizeof(EMC_SPINDLE_BRAKE_RELEASE),
	sizeof(EMC_SPINDLE_CONSTANT),
	sizeof(EMC_SPINDLE_DECREASE),
	sizeof(EMC_SPINDLE_INCREASE),
	sizeof(EMC_SPINDLE_OFF),
	sizeof(EMC_SPINDLE_ON),
	sizeof(EMC_SPINDLE_ORIENT),
	sizeof(EMC_SPINDLE_SPEED),
	sizeof(EMC_SPINDLE_STAT),
	sizeof(EMC_SPINDLE_WAIT_ORIENT_COMPLETE),
	sizeof(EMC_STAT),
	sizeof(EMC_SYSTEM_CMD),
	sizeof(EMC_TASK_ABORT),
	sizeof(EMC_TASK_HALT),
	sizeof(EMC_TASK_INIT),
	sizeof(EMC_TASK_PLAN_CLOSE),
	sizeof(EMC_TASK_PLAN_END),
	sizeof(EMC_TASK_PLAN_EXECUTE),
	sizeof(EMC_TASK_PLAN_INIT),
	sizeof(EMC_TASK_PLAN_OPEN),
	sizeof(EMC_TASK_PLAN_OPTIONAL_STOP),
	sizeof(EMC_TASK_PLAN_PAUSE),
	sizeof(EMC_TASK_PLAN_READ),
	sizeof(EMC_TASK_PLAN_RESUME),
	sizeof(EMC_TASK_PLAN_RUN),
	sizeof(EMC_TASK_PLAN_SET_BLOCK_DELETE),
	sizeof(EMC_TASK_PLAN_SET_OPTIONAL_STOP),
	sizeof(EMC_TASK_PLAN_STEP),
	sizeof(EMC_TASK_PLAN_SYNCH),
	sizeof(EMC_TASK_SET_MODE),
	sizeof(EMC_TASK_SET_STATE),
	sizeof(EMC_TASK_STAT),
	sizeof(EMC_TOOL_ABORT),
	sizeof(EMC_TOOL_HALT),
	sizeof(EMC_TOOL_INIT),
	sizeof(EMC_TOOL_LOAD),
	sizeof(EMC_TOOL_LOAD_TOOL_TABLE),
	sizeof(EMC_TOOL_PREPARE),
	sizeof(EMC_TOOL_SET_NUMBER),
	sizeof(EMC_TOOL_SET_OFFSET),
	sizeof(EMC_TOOL_START_CHANGE),
	sizeof(EMC_TOOL_STAT),
	sizeof(EMC_TOOL_UNLOAD),
	sizeof(EMC_TRAJ_ABORT),
	sizeof(EMC_TRAJ_CIRCULAR_MOVE),
	sizeof(EMC_TRAJ_CLEAR_PROBE_TRIPPED_FLAG),
	sizeof(EMC_TRAJ_DELAY),
	sizeof(EMC_TRAJ_DISABLE),
	sizeof(EMC_TRAJ_ENABLE),
	sizeof(EMC_TRAJ_HALT),
	sizeof(EMC_TRAJ_INIT),
	sizeof(EMC_TRAJ_LINEAR_MOVE),
	sizeof(EMC_TRAJ_PAUSE),
	sizeof(EMC_TRAJ_PROBE),
	sizeof(EMC_TRAJ_RESUME),
	sizeof(EMC_TRAJ_RIGID_TAP),
	sizeof(EMC_TRAJ_SET_ACCELERATION),
	sizeof(EMC_TRAJ_SET_AXES),
	sizeof(EMC_TRAJ_SET_CYCLE_TIME),
	sizeof(EMC_TRAJ_SET_FH_ENABLE),
	sizeof(EMC_TRAJ_SET_FO_ENABLE),
	sizeof(EMC_TRAJ_SET_G5X),
	sizeof(EMC_TRAJ_SET_G92),
	sizeof(EMC_TRAJ_SET_HOME),
	sizeof(EMC_TRAJ_SET_MAX_ACCELERATION),
	sizeof(EMC_TRAJ_SET_MAX_VELOCITY),
	sizeof(EMC_TRAJ_SET_MODE),
	sizeof(EMC_TRAJ_SET_MOTION_ID),
	sizeof(EMC_TRAJ_SET_OFFSET),
	sizeof(EMC_TRAJ_SET_RAPID_SCALE),
	sizeof(EMC_TRAJ_SET_ROTATION),
	sizeof(EMC_TRAJ_SET_SCALE),
	sizeof(EMC_TRAJ_SET_SO_ENABLE),
	sizeof(EMC_TRAJ_SET_SPINDLESYNC),
	sizeof(EMC_TRAJ_SET_SPINDLE_SCALE),
	sizeof(EMC_TRAJ_SET_TELEOP_ENABLE),
	sizeof(EMC_TRAJ_SET_TELEOP_VECTOR),
	sizeof(EMC_TRAJ_SET_TERM_COND),
	sizeof(EMC_TRAJ_SET_UNITS),
	sizeof(EMC_TRAJ_SET_VELOCITY),
	sizeof(EMC_TRAJ_STAT),
	sizeof(EMC_TRAJ_STEP),
	0};
const char *emc_symbol_lookup(long type);


// Enumerated Type Constants

// EMC_TASK_EXEC_ENUM
#ifndef MAX_ENUM_EMC_TASK_EXEC_ENUM_STRING_LENGTH
#define MAX_ENUM_EMC_TASK_EXEC_ENUM_STRING_LENGTH 43
#endif
#ifndef ENUM_EMC_TASK_EXEC_ENUM_LENGTH
#define ENUM_EMC_TASK_EXEC_ENUM_LENGTH 10
#endif

static const char enum_EMC_TASK_EXEC_ENUM_string_list[ENUM_EMC_TASK_EXEC_ENUM_LENGTH][MAX_ENUM_EMC_TASK_EXEC_ENUM_STRING_LENGTH]= {
	"EMC_TASK_EXEC_DONE", /* 0,2 */
	"EMC_TASK_EXEC_ERROR", /* 1,1 */
	"EMC_TASK_EXEC_WAITING_FOR_DELAY", /* 2,8 */
	"EMC_TASK_EXEC_WAITING_FOR_IO", /* 3,5 */
	"EMC_TASK_EXEC_WAITING_FOR_MOTION", /* 4,3 */
	"EMC_TASK_EXEC_WAITING_FOR_MOTION_AND_IO", /* 5,7 */
	"EMC_TASK_EXEC_WAITING_FOR_MOTION_QUEUE", /* 6,4 */
	"EMC_TASK_EXEC_WAITING_FOR_SPINDLE_ORIENTED", /* 7,10 */
	"EMC_TASK_EXEC_WAITING_FOR_SYSTEM_CMD", /* 8,9 */
	""};

static const int enum_EMC_TASK_EXEC_ENUM_int_list[ENUM_EMC_TASK_EXEC_ENUM_LENGTH]= {
	EMC_TASK_EXEC_DONE, /* 0,2 */
	EMC_TASK_EXEC_ERROR, /* 1,1 */
	EMC_TASK_EXEC_WAITING_FOR_DELAY, /* 2,8 */
	EMC_TASK_EXEC_WAITING_FOR_IO, /* 3,5 */
	EMC_TASK_EXEC_WAITING_FOR_MOTION, /* 4,3 */
	EMC_TASK_EXEC_WAITING_FOR_MOTION_AND_IO, /* 5,7 */
	EMC_TASK_EXEC_WAITING_FOR_MOTION_QUEUE, /* 6,4 */
	EMC_TASK_EXEC_WAITING_FOR_SPINDLE_ORIENTED, /* 7,10 */
	EMC_TASK_EXEC_WAITING_FOR_SYSTEM_CMD, /* 8,9 */
	};

const char *emcenum_EMC_TASK_EXEC_ENUM_symbol_lookup(long v)
{
	switch(v)
	{
		case EMC_TASK_EXEC_DONE: return("EMC_TASK_EXEC_DONE"); /* 2 */
		case EMC_TASK_EXEC_ERROR: return("EMC_TASK_EXEC_ERROR"); /* 1 */
		case EMC_TASK_EXEC_WAITING_FOR_DELAY: return("EMC_TASK_EXEC_WAITING_FOR_DELAY"); /* 8 */
		case EMC_TASK_EXEC_WAITING_FOR_IO: return("EMC_TASK_EXEC_WAITING_FOR_IO"); /* 5 */
		case EMC_TASK_EXEC_WAITING_FOR_MOTION: return("EMC_TASK_EXEC_WAITING_FOR_MOTION"); /* 3 */
		case EMC_TASK_EXEC_WAITING_FOR_MOTION_AND_IO: return("EMC_TASK_EXEC_WAITING_FOR_MOTION_AND_IO"); /* 7 */
		case EMC_TASK_EXEC_WAITING_FOR_MOTION_QUEUE: return("EMC_TASK_EXEC_WAITING_FOR_MOTION_QUEUE"); /* 4 */
		case EMC_TASK_EXEC_WAITING_FOR_SPINDLE_ORIENTED: return("EMC_TASK_EXEC_WAITING_FOR_SPINDLE_ORIENTED"); /* 10 */
		case EMC_TASK_EXEC_WAITING_FOR_SYSTEM_CMD: return("EMC_TASK_EXEC_WAITING_FOR_SYSTEM_CMD"); /* 9 */
		default:break;
	}
	return("!!UNDEFINED_SYMBOL!!");
}

static const struct cms_enum_info enum_EMC_TASK_EXEC_ENUM_info_struct={
	"EMC_TASK_EXEC_ENUM",
	(const char **)enum_EMC_TASK_EXEC_ENUM_string_list,
	enum_EMC_TASK_EXEC_ENUM_int_list,
	MAX_ENUM_EMC_TASK_EXEC_ENUM_STRING_LENGTH,
	ENUM_EMC_TASK_EXEC_ENUM_LENGTH,
	(cms_symbol_lookup_function_t)emcenum_EMC_TASK_EXEC_ENUM_symbol_lookup
	};

// EMC_TRAJ_MODE_ENUM
#ifndef MAX_ENUM_EMC_TRAJ_MODE_ENUM_STRING_LENGTH
#define MAX_ENUM_EMC_TRAJ_MODE_ENUM_STRING_LENGTH 21
#endif
#ifndef ENUM_EMC_TRAJ_MODE_ENUM_LENGTH
#define ENUM_EMC_TRAJ_MODE_ENUM_LENGTH 4
#endif

static const char enum_EMC_TRAJ_MODE_ENUM_string_list[ENUM_EMC_TRAJ_MODE_ENUM_LENGTH][MAX_ENUM_EMC_TRAJ_MODE_ENUM_STRING_LENGTH]= {
	"EMC_TRAJ_MODE_COORD", /* 0,2 */
	"EMC_TRAJ_MODE_FREE", /* 1,1 */
	"EMC_TRAJ_MODE_TELEOP", /* 2,3 */
	""};

static const int enum_EMC_TRAJ_MODE_ENUM_int_list[ENUM_EMC_TRAJ_MODE_ENUM_LENGTH]= {
	EMC_TRAJ_MODE_COORD, /* 0,2 */
	EMC_TRAJ_MODE_FREE, /* 1,1 */
	EMC_TRAJ_MODE_TELEOP, /* 2,3 */
	};

const char *emcenum_EMC_TRAJ_MODE_ENUM_symbol_lookup(long v)
{
	switch(v)
	{
		case EMC_TRAJ_MODE_COORD: return("EMC_TRAJ_MODE_COORD"); /* 2 */
		case EMC_TRAJ_MODE_FREE: return("EMC_TRAJ_MODE_FREE"); /* 1 */
		case EMC_TRAJ_MODE_TELEOP: return("EMC_TRAJ_MODE_TELEOP"); /* 3 */
		default:break;
	}
	return("!!UNDEFINED_SYMBOL!!");
}

static const struct cms_enum_info enum_EMC_TRAJ_MODE_ENUM_info_struct={
	"EMC_TRAJ_MODE_ENUM",
	(const char **)enum_EMC_TRAJ_MODE_ENUM_string_list,
	enum_EMC_TRAJ_MODE_ENUM_int_list,
	MAX_ENUM_EMC_TRAJ_MODE_ENUM_STRING_LENGTH,
	ENUM_EMC_TRAJ_MODE_ENUM_LENGTH,
	(cms_symbol_lookup_function_t)emcenum_EMC_TRAJ_MODE_ENUM_symbol_lookup
	};

// EMC_TASK_MODE_ENUM
#ifndef MAX_ENUM_EMC_TASK_MODE_ENUM_STRING_LENGTH
#define MAX_ENUM_EMC_TASK_MODE_ENUM_STRING_LENGTH 21
#endif
#ifndef ENUM_EMC_TASK_MODE_ENUM_LENGTH
#define ENUM_EMC_TASK_MODE_ENUM_LENGTH 4
#endif

static const char enum_EMC_TASK_MODE_ENUM_string_list[ENUM_EMC_TASK_MODE_ENUM_LENGTH][MAX_ENUM_EMC_TASK_MODE_ENUM_STRING_LENGTH]= {
	"EMC_TASK_MODE_AUTO", /* 0,2 */
	"EMC_TASK_MODE_MANUAL", /* 1,1 */
	"EMC_TASK_MODE_MDI", /* 2,3 */
	""};

static const int enum_EMC_TASK_MODE_ENUM_int_list[ENUM_EMC_TASK_MODE_ENUM_LENGTH]= {
	EMC_TASK_MODE_AUTO, /* 0,2 */
	EMC_TASK_MODE_MANUAL, /* 1,1 */
	EMC_TASK_MODE_MDI, /* 2,3 */
	};

const char *emcenum_EMC_TASK_MODE_ENUM_symbol_lookup(long v)
{
	switch(v)
	{
		case EMC_TASK_MODE_AUTO: return("EMC_TASK_MODE_AUTO"); /* 2 */
		case EMC_TASK_MODE_MANUAL: return("EMC_TASK_MODE_MANUAL"); /* 1 */
		case EMC_TASK_MODE_MDI: return("EMC_TASK_MODE_MDI"); /* 3 */
		default:break;
	}
	return("!!UNDEFINED_SYMBOL!!");
}

static const struct cms_enum_info enum_EMC_TASK_MODE_ENUM_info_struct={
	"EMC_TASK_MODE_ENUM",
	(const char **)enum_EMC_TASK_MODE_ENUM_string_list,
	enum_EMC_TASK_MODE_ENUM_int_list,
	MAX_ENUM_EMC_TASK_MODE_ENUM_STRING_LENGTH,
	ENUM_EMC_TASK_MODE_ENUM_LENGTH,
	(cms_symbol_lookup_function_t)emcenum_EMC_TASK_MODE_ENUM_symbol_lookup
	};

// EMC_TASK_STATE_ENUM
#ifndef MAX_ENUM_EMC_TASK_STATE_ENUM_STRING_LENGTH
#define MAX_ENUM_EMC_TASK_STATE_ENUM_STRING_LENGTH 27
#endif
#ifndef ENUM_EMC_TASK_STATE_ENUM_LENGTH
#define ENUM_EMC_TASK_STATE_ENUM_LENGTH 5
#endif

static const char enum_EMC_TASK_STATE_ENUM_string_list[ENUM_EMC_TASK_STATE_ENUM_LENGTH][MAX_ENUM_EMC_TASK_STATE_ENUM_STRING_LENGTH]= {
	"EMC_TASK_STATE_ESTOP", /* 0,1 */
	"EMC_TASK_STATE_ESTOP_RESET", /* 1,2 */
	"EMC_TASK_STATE_OFF", /* 2,3 */
	"EMC_TASK_STATE_ON", /* 3,4 */
	""};

static const int enum_EMC_TASK_STATE_ENUM_int_list[ENUM_EMC_TASK_STATE_ENUM_LENGTH]= {
	EMC_TASK_STATE_ESTOP, /* 0,1 */
	EMC_TASK_STATE_ESTOP_RESET, /* 1,2 */
	EMC_TASK_STATE_OFF, /* 2,3 */
	EMC_TASK_STATE_ON, /* 3,4 */
	};

const char *emcenum_EMC_TASK_STATE_ENUM_symbol_lookup(long v)
{
	switch(v)
	{
		case EMC_TASK_STATE_ESTOP: return("EMC_TASK_STATE_ESTOP"); /* 1 */
		case EMC_TASK_STATE_ESTOP_RESET: return("EMC_TASK_STATE_ESTOP_RESET"); /* 2 */
		case EMC_TASK_STATE_OFF: return("EMC_TASK_STATE_OFF"); /* 3 */
		case EMC_TASK_STATE_ON: return("EMC_TASK_STATE_ON"); /* 4 */
		default:break;
	}
	return("!!UNDEFINED_SYMBOL!!");
}

static const struct cms_enum_info enum_EMC_TASK_STATE_ENUM_info_struct={
	"EMC_TASK_STATE_ENUM",
	(const char **)enum_EMC_TASK_STATE_ENUM_string_list,
	enum_EMC_TASK_STATE_ENUM_int_list,
	MAX_ENUM_EMC_TASK_STATE_ENUM_STRING_LENGTH,
	ENUM_EMC_TASK_STATE_ENUM_LENGTH,
	(cms_symbol_lookup_function_t)emcenum_EMC_TASK_STATE_ENUM_symbol_lookup
	};

// EMC_TASK_INTERP_ENUM
#ifndef MAX_ENUM_EMC_TASK_INTERP_ENUM_STRING_LENGTH
#define MAX_ENUM_EMC_TASK_INTERP_ENUM_STRING_LENGTH 24
#endif
#ifndef ENUM_EMC_TASK_INTERP_ENUM_LENGTH
#define ENUM_EMC_TASK_INTERP_ENUM_LENGTH 5
#endif

static const char enum_EMC_TASK_INTERP_ENUM_string_list[ENUM_EMC_TASK_INTERP_ENUM_LENGTH][MAX_ENUM_EMC_TASK_INTERP_ENUM_STRING_LENGTH]= {
	"EMC_TASK_INTERP_IDLE", /* 0,1 */
	"EMC_TASK_INTERP_PAUSED", /* 1,3 */
	"EMC_TASK_INTERP_READING", /* 2,2 */
	"EMC_TASK_INTERP_WAITING", /* 3,4 */
	""};

static const int enum_EMC_TASK_INTERP_ENUM_int_list[ENUM_EMC_TASK_INTERP_ENUM_LENGTH]= {
	EMC_TASK_INTERP_IDLE, /* 0,1 */
	EMC_TASK_INTERP_PAUSED, /* 1,3 */
	EMC_TASK_INTERP_READING, /* 2,2 */
	EMC_TASK_INTERP_WAITING, /* 3,4 */
	};

const char *emcenum_EMC_TASK_INTERP_ENUM_symbol_lookup(long v)
{
	switch(v)
	{
		case EMC_TASK_INTERP_IDLE: return("EMC_TASK_INTERP_IDLE"); /* 1 */
		case EMC_TASK_INTERP_PAUSED: return("EMC_TASK_INTERP_PAUSED"); /* 3 */
		case EMC_TASK_INTERP_READING: return("EMC_TASK_INTERP_READING"); /* 2 */
		case EMC_TASK_INTERP_WAITING: return("EMC_TASK_INTERP_WAITING"); /* 4 */
		default:break;
	}
	return("!!UNDEFINED_SYMBOL!!");
}

static const struct cms_enum_info enum_EMC_TASK_INTERP_ENUM_info_struct={
	"EMC_TASK_INTERP_ENUM",
	(const char **)enum_EMC_TASK_INTERP_ENUM_string_list,
	enum_EMC_TASK_INTERP_ENUM_int_list,
	MAX_ENUM_EMC_TASK_INTERP_ENUM_STRING_LENGTH,
	ENUM_EMC_TASK_INTERP_ENUM_LENGTH,
	(cms_symbol_lookup_function_t)emcenum_EMC_TASK_INTERP_ENUM_symbol_lookup
	};

/*
Estimated_size	CANON_TOOL_TABLE	104
Estimated_size	CANON_VECTOR	24
Estimated_size	CONTROL_POINT	24
Estimated_size	EMC_ABORT	24
Estimated_size	EMC_AUX_CMD_MSG	24
Estimated_size	EMC_AUX_ESTOP_OFF	24
Estimated_size	EMC_AUX_ESTOP_ON	24
Estimated_size	EMC_AUX_ESTOP_RESET	24
Estimated_size	EMC_AUX_INPUT_WAIT	56
Estimated_size	EMC_AUX_STAT	136
Estimated_size	EMC_AUX_STAT_MSG	128
Estimated_size	EMC_AXIS_ABORT	32
Estimated_size	EMC_AXIS_ABS_JOG	48
Estimated_size	EMC_AXIS_ACTIVATE	32
Estimated_size	EMC_AXIS_CMD_MSG	32
Estimated_size	EMC_AXIS_DEACTIVATE	32
Estimated_size	EMC_AXIS_DISABLE	32
Estimated_size	EMC_AXIS_ENABLE	32
Estimated_size	EMC_AXIS_HALT	32
Estimated_size	EMC_AXIS_HOME	32
Estimated_size	EMC_AXIS_INCR_JOG	48
Estimated_size	EMC_AXIS_INIT	32
Estimated_size	EMC_AXIS_JOG	40
Estimated_size	EMC_AXIS_LOAD_COMP	296
Estimated_size	EMC_AXIS_OVERRIDE_LIMITS	32
Estimated_size	EMC_AXIS_SET_AXIS	33
Estimated_size	EMC_AXIS_SET_BACKLASH	40
Estimated_size	EMC_AXIS_SET_FERROR	40
Estimated_size	EMC_AXIS_SET_HOMING_PARAMS	120
Estimated_size	EMC_AXIS_SET_MAX_POSITION_LIMIT	40
Estimated_size	EMC_AXIS_SET_MAX_VELOCITY	40
Estimated_size	EMC_AXIS_SET_MIN_FERROR	40
Estimated_size	EMC_AXIS_SET_MIN_POSITION_LIMIT	40
Estimated_size	EMC_AXIS_SET_UNITS	40
Estimated_size	EMC_AXIS_STAT	242
Estimated_size	EMC_AXIS_STAT_MSG	136
Estimated_size	EMC_AXIS_UNHOME	32
Estimated_size	EMC_CMD_MSG	24
Estimated_size	EMC_COOLANT_CMD_MSG	24
Estimated_size	EMC_COOLANT_FLOOD_OFF	24
Estimated_size	EMC_COOLANT_FLOOD_ON	24
Estimated_size	EMC_COOLANT_MIST_OFF	24
Estimated_size	EMC_COOLANT_MIST_ON	24
Estimated_size	EMC_COOLANT_STAT	144
Estimated_size	EMC_COOLANT_STAT_MSG	128
Estimated_size	EMC_EXEC_PLUGIN_CALL	932
Estimated_size	EMC_HALT	24
Estimated_size	EMC_INIT	24
Estimated_size	EMC_IO_ABORT	24
Estimated_size	EMC_IO_CMD_MSG	24
Estimated_size	EMC_IO_HALT	24
Estimated_size	EMC_IO_INIT	24
Estimated_size	EMC_IO_PLUGIN_CALL	932
Estimated_size	EMC_IO_SET_CYCLE_TIME	32
Estimated_size	EMC_IO_STAT	6544
Estimated_size	EMC_IO_STAT_MSG	136
Estimated_size	EMC_LUBE_CMD_MSG	24
Estimated_size	EMC_LUBE_OFF	24
Estimated_size	EMC_LUBE_ON	24
Estimated_size	EMC_LUBE_STAT	144
Estimated_size	EMC_LUBE_STAT_MSG	128
Estimated_size	EMC_MOTION_ABORT	24
Estimated_size	EMC_MOTION_ADAPTIVE	25
Estimated_size	EMC_MOTION_CMD_MSG	24
Estimated_size	EMC_MOTION_HALT	24
Estimated_size	EMC_MOTION_INIT	24
Estimated_size	EMC_MOTION_SET_AOUT	49
Estimated_size	EMC_MOTION_SET_DOUT	28
Estimated_size	EMC_MOTION_STAT	3064
Estimated_size	EMC_MOTION_STAT_MSG	136
Estimated_size	EMC_NULL	24
Estimated_size	EMC_OPERATOR_DISPLAY	287
Estimated_size	EMC_OPERATOR_ERROR	287
Estimated_size	EMC_OPERATOR_TEXT	287
Estimated_size	EMC_SET_DEBUG	32
Estimated_size	EMC_SPINDLE_BRAKE_ENGAGE	24
Estimated_size	EMC_SPINDLE_BRAKE_RELEASE	24
Estimated_size	EMC_SPINDLE_CMD_MSG	24
Estimated_size	EMC_SPINDLE_CONSTANT	32
Estimated_size	EMC_SPINDLE_DECREASE	32
Estimated_size	EMC_SPINDLE_INCREASE	32
Estimated_size	EMC_SPINDLE_OFF	24
Estimated_size	EMC_SPINDLE_ON	48
Estimated_size	EMC_SPINDLE_ORIENT	40
Estimated_size	EMC_SPINDLE_SPEED	48
Estimated_size	EMC_SPINDLE_STAT	184
Estimated_size	EMC_SPINDLE_STAT_MSG	128
Estimated_size	EMC_SPINDLE_WAIT_ORIENT_COMPLETE	32
Estimated_size	EMC_STAT	10912
Estimated_size	EMC_STAT_MSG	128
Estimated_size	EMC_SYSTEM_CMD	280
Estimated_size	EMC_TASK_ABORT	24
Estimated_size	EMC_TASK_CMD_MSG	24
Estimated_size	EMC_TASK_HALT	24
Estimated_size	EMC_TASK_INIT	24
Estimated_size	EMC_TASK_PLAN_CLOSE	24
Estimated_size	EMC_TASK_PLAN_END	24
Estimated_size	EMC_TASK_PLAN_EXECUTE	279
Estimated_size	EMC_TASK_PLAN_INIT	24
Estimated_size	EMC_TASK_PLAN_OPEN	279
Estimated_size	EMC_TASK_PLAN_OPTIONAL_STOP	24
Estimated_size	EMC_TASK_PLAN_PAUSE	24
Estimated_size	EMC_TASK_PLAN_READ	24
Estimated_size	EMC_TASK_PLAN_RESUME	24
Estimated_size	EMC_TASK_PLAN_RUN	32
Estimated_size	EMC_TASK_PLAN_SET_BLOCK_DELETE	25
Estimated_size	EMC_TASK_PLAN_SET_OPTIONAL_STOP	25
Estimated_size	EMC_TASK_PLAN_STEP	24
Estimated_size	EMC_TASK_PLAN_SYNCH	24
Estimated_size	EMC_TASK_SET_MODE	28
Estimated_size	EMC_TASK_SET_STATE	28
Estimated_size	EMC_TASK_STAT	1168
Estimated_size	EMC_TASK_STAT_MSG	136
Estimated_size	EMC_TOOL_ABORT	32
Estimated_size	EMC_TOOL_CMD_MSG	24
Estimated_size	EMC_TOOL_HALT	24
Estimated_size	EMC_TOOL_INIT	24
Estimated_size	EMC_TOOL_LOAD	24
Estimated_size	EMC_TOOL_LOAD_TOOL_TABLE	279
Estimated_size	EMC_TOOL_PREPARE	40
Estimated_size	EMC_TOOL_SET_NUMBER	32
Estimated_size	EMC_TOOL_SET_OFFSET	144
Estimated_size	EMC_TOOL_START_CHANGE	24
Estimated_size	EMC_TOOL_STAT	5968
Estimated_size	EMC_TOOL_STAT_MSG	128
Estimated_size	EMC_TOOL_UNLOAD	24
Estimated_size	EMC_TRAJ_ABORT	24
Estimated_size	EMC_TRAJ_CIRCULAR_MOVE	192
Estimated_size	EMC_TRAJ_CLEAR_PROBE_TRIPPED_FLAG	24
Estimated_size	EMC_TRAJ_CMD_MSG	24
Estimated_size	EMC_TRAJ_DELAY	32
Estimated_size	EMC_TRAJ_DISABLE	24
Estimated_size	EMC_TRAJ_ENABLE	24
Estimated_size	EMC_TRAJ_HALT	24
Estimated_size	EMC_TRAJ_INIT	24
Estimated_size	EMC_TRAJ_LINEAR_MOVE	144
Estimated_size	EMC_TRAJ_PAUSE	24
Estimated_size	EMC_TRAJ_PROBE	129
Estimated_size	EMC_TRAJ_RESUME	24
Estimated_size	EMC_TRAJ_RIGID_TAP	120
Estimated_size	EMC_TRAJ_SET_ACCELERATION	32
Estimated_size	EMC_TRAJ_SET_AXES	32
Estimated_size	EMC_TRAJ_SET_CYCLE_TIME	32
Estimated_size	EMC_TRAJ_SET_FH_ENABLE	25
Estimated_size	EMC_TRAJ_SET_FO_ENABLE	25
Estimated_size	EMC_TRAJ_SET_G5X	104
Estimated_size	EMC_TRAJ_SET_G92	96
Estimated_size	EMC_TRAJ_SET_HOME	96
Estimated_size	EMC_TRAJ_SET_MAX_ACCELERATION	32
Estimated_size	EMC_TRAJ_SET_MAX_VELOCITY	32
Estimated_size	EMC_TRAJ_SET_MODE	28
Estimated_size	EMC_TRAJ_SET_MOTION_ID	32
Estimated_size	EMC_TRAJ_SET_OFFSET	96
Estimated_size	EMC_TRAJ_SET_RAPID_SCALE	32
Estimated_size	EMC_TRAJ_SET_ROTATION	32
Estimated_size	EMC_TRAJ_SET_SCALE	32
Estimated_size	EMC_TRAJ_SET_SO_ENABLE	25
Estimated_size	EMC_TRAJ_SET_SPINDLESYNC	33
Estimated_size	EMC_TRAJ_SET_SPINDLE_SCALE	32
Estimated_size	EMC_TRAJ_SET_TELEOP_ENABLE	32
Estimated_size	EMC_TRAJ_SET_TELEOP_VECTOR	96
Estimated_size	EMC_TRAJ_SET_TERM_COND	40
Estimated_size	EMC_TRAJ_SET_UNITS	40
Estimated_size	EMC_TRAJ_SET_VELOCITY	40
Estimated_size	EMC_TRAJ_STAT	504
Estimated_size	EMC_TRAJ_STAT_MSG	128
Estimated_size	EMC_TRAJ_STEP	24
Estimated_size	EmcPose	72
Estimated_size	PLANE_POINT	16
Estimated_size	PmCartesian	24
Estimated_size	MAXIMUM	10912
*/
/*
*	NML/CMS Format function : emcFormat
*/
int emcFormat(NMLTYPE type, void *buffer, CMS *cms)
{

	type = cms->check_type_info(type,buffer,"em",
		(cms_symbol_lookup_function_t) emc_symbol_lookup,
		(const char **)emcname_list,
		emcid_list,emcsize_list,
		EMCNAME_LIST_LENGTH,
		MAX_EMCNAME_LENGTH);

	switch(type)
	{
	case EMC_ABORT_TYPE:
		((EMC_ABORT *) buffer)->update(cms);
		break;
	case EMC_AUX_ESTOP_OFF_TYPE:
		((EMC_AUX_ESTOP_OFF *) buffer)->update(cms);
		break;
	case EMC_AUX_ESTOP_ON_TYPE:
		((EMC_AUX_ESTOP_ON *) buffer)->update(cms);
		break;
	case EMC_AUX_ESTOP_RESET_TYPE:
		((EMC_AUX_ESTOP_RESET *) buffer)->update(cms);
		break;
	case EMC_AUX_INPUT_WAIT_TYPE:
		((EMC_AUX_INPUT_WAIT *) buffer)->update(cms);
		break;
	case EMC_AUX_STAT_TYPE:
		((EMC_AUX_STAT *) buffer)->update(cms);
		break;
	case EMC_AXIS_ABORT_TYPE:
		((EMC_AXIS_ABORT *) buffer)->update(cms);
		break;
	case EMC_AXIS_ABS_JOG_TYPE:
		((EMC_AXIS_ABS_JOG *) buffer)->update(cms);
		break;
	case EMC_AXIS_ACTIVATE_TYPE:
		((EMC_AXIS_ACTIVATE *) buffer)->update(cms);
		break;
	case EMC_AXIS_DEACTIVATE_TYPE:
		((EMC_AXIS_DEACTIVATE *) buffer)->update(cms);
		break;
	case EMC_AXIS_DISABLE_TYPE:
		((EMC_AXIS_DISABLE *) buffer)->update(cms);
		break;
	case EMC_AXIS_ENABLE_TYPE:
		((EMC_AXIS_ENABLE *) buffer)->update(cms);
		break;
	case EMC_AXIS_HALT_TYPE:
		((EMC_AXIS_HALT *) buffer)->update(cms);
		break;
	case EMC_AXIS_HOME_TYPE:
		((EMC_AXIS_HOME *) buffer)->update(cms);
		break;
	case EMC_AXIS_INCR_JOG_TYPE:
		((EMC_AXIS_INCR_JOG *) buffer)->update(cms);
		break;
	case EMC_AXIS_INIT_TYPE:
		((EMC_AXIS_INIT *) buffer)->update(cms);
		break;
	case EMC_AXIS_JOG_TYPE:
		((EMC_AXIS_JOG *) buffer)->update(cms);
		break;
	case EMC_AXIS_LOAD_COMP_TYPE:
		((EMC_AXIS_LOAD_COMP *) buffer)->update(cms);
		break;
	case EMC_AXIS_OVERRIDE_LIMITS_TYPE:
		((EMC_AXIS_OVERRIDE_LIMITS *) buffer)->update(cms);
		break;
	case EMC_AXIS_SET_AXIS_TYPE:
		((EMC_AXIS_SET_AXIS *) buffer)->update(cms);
		break;
	case EMC_AXIS_SET_BACKLASH_TYPE:
		((EMC_AXIS_SET_BACKLASH *) buffer)->update(cms);
		break;
	case EMC_AXIS_SET_FERROR_TYPE:
		((EMC_AXIS_SET_FERROR *) buffer)->update(cms);
		break;
	case EMC_AXIS_SET_HOMING_PARAMS_TYPE:
		((EMC_AXIS_SET_HOMING_PARAMS *) buffer)->update(cms);
		break;
	case EMC_AXIS_SET_MAX_POSITION_LIMIT_TYPE:
		((EMC_AXIS_SET_MAX_POSITION_LIMIT *) buffer)->update(cms);
		break;
	case EMC_AXIS_SET_MAX_VELOCITY_TYPE:
		((EMC_AXIS_SET_MAX_VELOCITY *) buffer)->update(cms);
		break;
	case EMC_AXIS_SET_MIN_FERROR_TYPE:
		((EMC_AXIS_SET_MIN_FERROR *) buffer)->update(cms);
		break;
	case EMC_AXIS_SET_MIN_POSITION_LIMIT_TYPE:
		((EMC_AXIS_SET_MIN_POSITION_LIMIT *) buffer)->update(cms);
		break;
	case EMC_AXIS_SET_UNITS_TYPE:
		((EMC_AXIS_SET_UNITS *) buffer)->update(cms);
		break;
	case EMC_AXIS_STAT_TYPE:
		((EMC_AXIS_STAT *) buffer)->update(cms);
		break;
	case EMC_AXIS_UNHOME_TYPE:
		((EMC_AXIS_UNHOME *) buffer)->update(cms);
		break;
	case EMC_COOLANT_FLOOD_OFF_TYPE:
		((EMC_COOLANT_FLOOD_OFF *) buffer)->update(cms);
		break;
	case EMC_COOLANT_FLOOD_ON_TYPE:
		((EMC_COOLANT_FLOOD_ON *) buffer)->update(cms);
		break;
	case EMC_COOLANT_MIST_OFF_TYPE:
		((EMC_COOLANT_MIST_OFF *) buffer)->update(cms);
		break;
	case EMC_COOLANT_MIST_ON_TYPE:
		((EMC_COOLANT_MIST_ON *) buffer)->update(cms);
		break;
	case EMC_COOLANT_STAT_TYPE:
		((EMC_COOLANT_STAT *) buffer)->update(cms);
		break;
	case EMC_EXEC_PLUGIN_CALL_TYPE:
		((EMC_EXEC_PLUGIN_CALL *) buffer)->update(cms);
		break;
	case EMC_HALT_TYPE:
		((EMC_HALT *) buffer)->update(cms);
		break;
	case EMC_INIT_TYPE:
		((EMC_INIT *) buffer)->update(cms);
		break;
	case EMC_IO_ABORT_TYPE:
		((EMC_IO_ABORT *) buffer)->update(cms);
		break;
	case EMC_IO_HALT_TYPE:
		((EMC_IO_HALT *) buffer)->update(cms);
		break;
	case EMC_IO_INIT_TYPE:
		((EMC_IO_INIT *) buffer)->update(cms);
		break;
	case EMC_IO_PLUGIN_CALL_TYPE:
		((EMC_IO_PLUGIN_CALL *) buffer)->update(cms);
		break;
	case EMC_IO_SET_CYCLE_TIME_TYPE:
		((EMC_IO_SET_CYCLE_TIME *) buffer)->update(cms);
		break;
	case EMC_IO_STAT_TYPE:
		((EMC_IO_STAT *) buffer)->update(cms);
		break;
	case EMC_LUBE_OFF_TYPE:
		((EMC_LUBE_OFF *) buffer)->update(cms);
		break;
	case EMC_LUBE_ON_TYPE:
		((EMC_LUBE_ON *) buffer)->update(cms);
		break;
	case EMC_LUBE_STAT_TYPE:
		((EMC_LUBE_STAT *) buffer)->update(cms);
		break;
	case EMC_MOTION_ABORT_TYPE:
		((EMC_MOTION_ABORT *) buffer)->update(cms);
		break;
	case EMC_MOTION_ADAPTIVE_TYPE:
		((EMC_MOTION_ADAPTIVE *) buffer)->update(cms);
		break;
	case EMC_MOTION_HALT_TYPE:
		((EMC_MOTION_HALT *) buffer)->update(cms);
		break;
	case EMC_MOTION_INIT_TYPE:
		((EMC_MOTION_INIT *) buffer)->update(cms);
		break;
	case EMC_MOTION_SET_AOUT_TYPE:
		((EMC_MOTION_SET_AOUT *) buffer)->update(cms);
		break;
	case EMC_MOTION_SET_DOUT_TYPE:
		((EMC_MOTION_SET_DOUT *) buffer)->update(cms);
		break;
	case EMC_MOTION_STAT_TYPE:
		((EMC_MOTION_STAT *) buffer)->update(cms);
		break;
	case EMC_NULL_TYPE:
		((EMC_NULL *) buffer)->update(cms);
		break;
	case EMC_OPERATOR_DISPLAY_TYPE:
		((EMC_OPERATOR_DISPLAY *) buffer)->update(cms);
		break;
	case EMC_OPERATOR_ERROR_TYPE:
		((EMC_OPERATOR_ERROR *) buffer)->update(cms);
		break;
	case EMC_OPERATOR_TEXT_TYPE:
		((EMC_OPERATOR_TEXT *) buffer)->update(cms);
		break;
	case EMC_SET_DEBUG_TYPE:
		((EMC_SET_DEBUG *) buffer)->update(cms);
		break;
	case EMC_SPINDLE_BRAKE_ENGAGE_TYPE:
		((EMC_SPINDLE_BRAKE_ENGAGE *) buffer)->update(cms);
		break;
	case EMC_SPINDLE_BRAKE_RELEASE_TYPE:
		((EMC_SPINDLE_BRAKE_RELEASE *) buffer)->update(cms);
		break;
	case EMC_SPINDLE_CONSTANT_TYPE:
		((EMC_SPINDLE_CONSTANT *) buffer)->update(cms);
		break;
	case EMC_SPINDLE_DECREASE_TYPE:
		((EMC_SPINDLE_DECREASE *) buffer)->update(cms);
		break;
	case EMC_SPINDLE_INCREASE_TYPE:
		((EMC_SPINDLE_INCREASE *) buffer)->update(cms);
		break;
	case EMC_SPINDLE_OFF_TYPE:
		((EMC_SPINDLE_OFF *) buffer)->update(cms);
		break;
	case EMC_SPINDLE_ON_TYPE:
		((EMC_SPINDLE_ON *) buffer)->update(cms);
		break;
	case EMC_SPINDLE_ORIENT_TYPE:
		((EMC_SPINDLE_ORIENT *) buffer)->update(cms);
		break;
	case EMC_SPINDLE_SPEED_TYPE:
		((EMC_SPINDLE_SPEED *) buffer)->update(cms);
		break;
	case EMC_SPINDLE_STAT_TYPE:
		((EMC_SPINDLE_STAT *) buffer)->update(cms);
		break;
	case EMC_SPINDLE_WAIT_ORIENT_COMPLETE_TYPE:
		((EMC_SPINDLE_WAIT_ORIENT_COMPLETE *) buffer)->update(cms);
		break;
	case EMC_STAT_TYPE:
		((EMC_STAT *) buffer)->update(cms);
		break;
	case EMC_SYSTEM_CMD_TYPE:
		((EMC_SYSTEM_CMD *) buffer)->update(cms);
		break;
	case EMC_TASK_ABORT_TYPE:
		((EMC_TASK_ABORT *) buffer)->update(cms);
		break;
	case EMC_TASK_HALT_TYPE:
		((EMC_TASK_HALT *) buffer)->update(cms);
		break;
	case EMC_TASK_INIT_TYPE:
		((EMC_TASK_INIT *) buffer)->update(cms);
		break;
	case EMC_TASK_PLAN_CLOSE_TYPE:
		((EMC_TASK_PLAN_CLOSE *) buffer)->update(cms);
		break;
	case EMC_TASK_PLAN_END_TYPE:
		((EMC_TASK_PLAN_END *) buffer)->update(cms);
		break;
	case EMC_TASK_PLAN_EXECUTE_TYPE:
		((EMC_TASK_PLAN_EXECUTE *) buffer)->update(cms);
		break;
	case EMC_TASK_PLAN_INIT_TYPE:
		((EMC_TASK_PLAN_INIT *) buffer)->update(cms);
		break;
	case EMC_TASK_PLAN_OPEN_TYPE:
		((EMC_TASK_PLAN_OPEN *) buffer)->update(cms);
		break;
	case EMC_TASK_PLAN_OPTIONAL_STOP_TYPE:
		((EMC_TASK_PLAN_OPTIONAL_STOP *) buffer)->update(cms);
		break;
	case EMC_TASK_PLAN_PAUSE_TYPE:
		((EMC_TASK_PLAN_PAUSE *) buffer)->update(cms);
		break;
	case EMC_TASK_PLAN_READ_TYPE:
		((EMC_TASK_PLAN_READ *) buffer)->update(cms);
		break;
	case EMC_TASK_PLAN_RESUME_TYPE:
		((EMC_TASK_PLAN_RESUME *) buffer)->update(cms);
		break;
	case EMC_TASK_PLAN_RUN_TYPE:
		((EMC_TASK_PLAN_RUN *) buffer)->update(cms);
		break;
	case EMC_TASK_PLAN_SET_BLOCK_DELETE_TYPE:
		((EMC_TASK_PLAN_SET_BLOCK_DELETE *) buffer)->update(cms);
		break;
	case EMC_TASK_PLAN_SET_OPTIONAL_STOP_TYPE:
		((EMC_TASK_PLAN_SET_OPTIONAL_STOP *) buffer)->update(cms);
		break;
	case EMC_TASK_PLAN_STEP_TYPE:
		((EMC_TASK_PLAN_STEP *) buffer)->update(cms);
		break;
	case EMC_TASK_PLAN_SYNCH_TYPE:
		((EMC_TASK_PLAN_SYNCH *) buffer)->update(cms);
		break;
	case EMC_TASK_SET_MODE_TYPE:
		((EMC_TASK_SET_MODE *) buffer)->update(cms);
		break;
	case EMC_TASK_SET_STATE_TYPE:
		((EMC_TASK_SET_STATE *) buffer)->update(cms);
		break;
	case EMC_TASK_STAT_TYPE:
		((EMC_TASK_STAT *) buffer)->update(cms);
		break;
	case EMC_TOOL_ABORT_TYPE:
		((EMC_TOOL_ABORT *) buffer)->update(cms);
		break;
	case EMC_TOOL_HALT_TYPE:
		((EMC_TOOL_HALT *) buffer)->update(cms);
		break;
	case EMC_TOOL_INIT_TYPE:
		((EMC_TOOL_INIT *) buffer)->update(cms);
		break;
	case EMC_TOOL_LOAD_TYPE:
		((EMC_TOOL_LOAD *) buffer)->update(cms);
		break;
	case EMC_TOOL_LOAD_TOOL_TABLE_TYPE:
		((EMC_TOOL_LOAD_TOOL_TABLE *) buffer)->update(cms);
		break;
	case EMC_TOOL_PREPARE_TYPE:
		((EMC_TOOL_PREPARE *) buffer)->update(cms);
		break;
	case EMC_TOOL_SET_NUMBER_TYPE:
		((EMC_TOOL_SET_NUMBER *) buffer)->update(cms);
		break;
	case EMC_TOOL_SET_OFFSET_TYPE:
		((EMC_TOOL_SET_OFFSET *) buffer)->update(cms);
		break;
	case EMC_TOOL_START_CHANGE_TYPE:
		((EMC_TOOL_START_CHANGE *) buffer)->update(cms);
		break;
	case EMC_TOOL_STAT_TYPE:
		((EMC_TOOL_STAT *) buffer)->update(cms);
		break;
	case EMC_TOOL_UNLOAD_TYPE:
		((EMC_TOOL_UNLOAD *) buffer)->update(cms);
		break;
	case EMC_TRAJ_ABORT_TYPE:
		((EMC_TRAJ_ABORT *) buffer)->update(cms);
		break;
	case EMC_TRAJ_CIRCULAR_MOVE_TYPE:
		((EMC_TRAJ_CIRCULAR_MOVE *) buffer)->update(cms);
		break;
	case EMC_TRAJ_CLEAR_PROBE_TRIPPED_FLAG_TYPE:
		((EMC_TRAJ_CLEAR_PROBE_TRIPPED_FLAG *) buffer)->update(cms);
		break;
	case EMC_TRAJ_DELAY_TYPE:
		((EMC_TRAJ_DELAY *) buffer)->update(cms);
		break;
	case EMC_TRAJ_DISABLE_TYPE:
		((EMC_TRAJ_DISABLE *) buffer)->update(cms);
		break;
	case EMC_TRAJ_ENABLE_TYPE:
		((EMC_TRAJ_ENABLE *) buffer)->update(cms);
		break;
	case EMC_TRAJ_HALT_TYPE:
		((EMC_TRAJ_HALT *) buffer)->update(cms);
		break;
	case EMC_TRAJ_INIT_TYPE:
		((EMC_TRAJ_INIT *) buffer)->update(cms);
		break;
	case EMC_TRAJ_LINEAR_MOVE_TYPE:
		((EMC_TRAJ_LINEAR_MOVE *) buffer)->update(cms);
		break;
	case EMC_TRAJ_PAUSE_TYPE:
		((EMC_TRAJ_PAUSE *) buffer)->update(cms);
		break;
	case EMC_TRAJ_PROBE_TYPE:
		((EMC_TRAJ_PROBE *) buffer)->update(cms);
		break;
	case EMC_TRAJ_RESUME_TYPE:
		((EMC_TRAJ_RESUME *) buffer)->update(cms);
		break;
	case EMC_TRAJ_RIGID_TAP_TYPE:
		((EMC_TRAJ_RIGID_TAP *) buffer)->update(cms);
		break;
	case EMC_TRAJ_SET_ACCELERATION_TYPE:
		((EMC_TRAJ_SET_ACCELERATION *) buffer)->update(cms);
		break;
	case EMC_TRAJ_SET_AXES_TYPE:
		((EMC_TRAJ_SET_AXES *) buffer)->update(cms);
		break;
	case EMC_TRAJ_SET_CYCLE_TIME_TYPE:
		((EMC_TRAJ_SET_CYCLE_TIME *) buffer)->update(cms);
		break;
	case EMC_TRAJ_SET_FH_ENABLE_TYPE:
		((EMC_TRAJ_SET_FH_ENABLE *) buffer)->update(cms);
		break;
	case EMC_TRAJ_SET_FO_ENABLE_TYPE:
		((EMC_TRAJ_SET_FO_ENABLE *) buffer)->update(cms);
		break;
	case EMC_TRAJ_SET_G5X_TYPE:
		((EMC_TRAJ_SET_G5X *) buffer)->update(cms);
		break;
	case EMC_TRAJ_SET_G92_TYPE:
		((EMC_TRAJ_SET_G92 *) buffer)->update(cms);
		break;
	case EMC_TRAJ_SET_HOME_TYPE:
		((EMC_TRAJ_SET_HOME *) buffer)->update(cms);
		break;
	case EMC_TRAJ_SET_MAX_ACCELERATION_TYPE:
		((EMC_TRAJ_SET_MAX_ACCELERATION *) buffer)->update(cms);
		break;
	case EMC_TRAJ_SET_MAX_VELOCITY_TYPE:
		((EMC_TRAJ_SET_MAX_VELOCITY *) buffer)->update(cms);
		break;
	case EMC_TRAJ_SET_MODE_TYPE:
		((EMC_TRAJ_SET_MODE *) buffer)->update(cms);
		break;
	case EMC_TRAJ_SET_MOTION_ID_TYPE:
		((EMC_TRAJ_SET_MOTION_ID *) buffer)->update(cms);
		break;
	case EMC_TRAJ_SET_OFFSET_TYPE:
		((EMC_TRAJ_SET_OFFSET *) buffer)->update(cms);
		break;
	case EMC_TRAJ_SET_RAPID_SCALE_TYPE:
		((EMC_TRAJ_SET_RAPID_SCALE *) buffer)->update(cms);
		break;
	case EMC_TRAJ_SET_ROTATION_TYPE:
		((EMC_TRAJ_SET_ROTATION *) buffer)->update(cms);
		break;
	case EMC_TRAJ_SET_SCALE_TYPE:
		((EMC_TRAJ_SET_SCALE *) buffer)->update(cms);
		break;
	case EMC_TRAJ_SET_SO_ENABLE_TYPE:
		((EMC_TRAJ_SET_SO_ENABLE *) buffer)->update(cms);
		break;
	case EMC_TRAJ_SET_SPINDLESYNC_TYPE:
		((EMC_TRAJ_SET_SPINDLESYNC *) buffer)->update(cms);
		break;
	case EMC_TRAJ_SET_SPINDLE_SCALE_TYPE:
		((EMC_TRAJ_SET_SPINDLE_SCALE *) buffer)->update(cms);
		break;
	case EMC_TRAJ_SET_TELEOP_ENABLE_TYPE:
		((EMC_TRAJ_SET_TELEOP_ENABLE *) buffer)->update(cms);
		break;
	case EMC_TRAJ_SET_TELEOP_VECTOR_TYPE:
		((EMC_TRAJ_SET_TELEOP_VECTOR *) buffer)->update(cms);
		break;
	case EMC_TRAJ_SET_TERM_COND_TYPE:
		((EMC_TRAJ_SET_TERM_COND *) buffer)->update(cms);
		break;
	case EMC_TRAJ_SET_UNITS_TYPE:
		((EMC_TRAJ_SET_UNITS *) buffer)->update(cms);
		break;
	case EMC_TRAJ_SET_VELOCITY_TYPE:
		((EMC_TRAJ_SET_VELOCITY *) buffer)->update(cms);
		break;
	case EMC_TRAJ_STAT_TYPE:
		((EMC_TRAJ_STAT *) buffer)->update(cms);
		break;
	case EMC_TRAJ_STEP_TYPE:
		((EMC_TRAJ_STEP *) buffer)->update(cms);
		break;

	default:
		return(0);
	}
	return 1;
}


// NML Symbol Lookup Function
const char *emc_symbol_lookup(long type)
{
	switch(type)
	{
	case EMC_ABORT_TYPE:
		return "EMC_ABORT";
	case EMC_AUX_ESTOP_OFF_TYPE:
		return "EMC_AUX_ESTOP_OFF";
	case EMC_AUX_ESTOP_ON_TYPE:
		return "EMC_AUX_ESTOP_ON";
	case EMC_AUX_ESTOP_RESET_TYPE:
		return "EMC_AUX_ESTOP_RESET";
	case EMC_AUX_INPUT_WAIT_TYPE:
		return "EMC_AUX_INPUT_WAIT";
	case EMC_AUX_STAT_TYPE:
		return "EMC_AUX_STAT";
	case EMC_AXIS_ABORT_TYPE:
		return "EMC_AXIS_ABORT";
	case EMC_AXIS_ABS_JOG_TYPE:
		return "EMC_AXIS_ABS_JOG";
	case EMC_AXIS_ACTIVATE_TYPE:
		return "EMC_AXIS_ACTIVATE";
	case EMC_AXIS_DEACTIVATE_TYPE:
		return "EMC_AXIS_DEACTIVATE";
	case EMC_AXIS_DISABLE_TYPE:
		return "EMC_AXIS_DISABLE";
	case EMC_AXIS_ENABLE_TYPE:
		return "EMC_AXIS_ENABLE";
	case EMC_AXIS_HALT_TYPE:
		return "EMC_AXIS_HALT";
	case EMC_AXIS_HOME_TYPE:
		return "EMC_AXIS_HOME";
	case EMC_AXIS_INCR_JOG_TYPE:
		return "EMC_AXIS_INCR_JOG";
	case EMC_AXIS_INIT_TYPE:
		return "EMC_AXIS_INIT";
	case EMC_AXIS_JOG_TYPE:
		return "EMC_AXIS_JOG";
	case EMC_AXIS_LOAD_COMP_TYPE:
		return "EMC_AXIS_LOAD_COMP";
	case EMC_AXIS_OVERRIDE_LIMITS_TYPE:
		return "EMC_AXIS_OVERRIDE_LIMITS";
	case EMC_AXIS_SET_AXIS_TYPE:
		return "EMC_AXIS_SET_AXIS";
	case EMC_AXIS_SET_BACKLASH_TYPE:
		return "EMC_AXIS_SET_BACKLASH";
	case EMC_AXIS_SET_FERROR_TYPE:
		return "EMC_AXIS_SET_FERROR";
	case EMC_AXIS_SET_HOMING_PARAMS_TYPE:
		return "EMC_AXIS_SET_HOMING_PARAMS";
	case EMC_AXIS_SET_MAX_POSITION_LIMIT_TYPE:
		return "EMC_AXIS_SET_MAX_POSITION_LIMIT";
	case EMC_AXIS_SET_MAX_VELOCITY_TYPE:
		return "EMC_AXIS_SET_MAX_VELOCITY";
	case EMC_AXIS_SET_MIN_FERROR_TYPE:
		return "EMC_AXIS_SET_MIN_FERROR";
	case EMC_AXIS_SET_MIN_POSITION_LIMIT_TYPE:
		return "EMC_AXIS_SET_MIN_POSITION_LIMIT";
	case EMC_AXIS_SET_UNITS_TYPE:
		return "EMC_AXIS_SET_UNITS";
	case EMC_AXIS_STAT_TYPE:
		return "EMC_AXIS_STAT";
	case EMC_AXIS_UNHOME_TYPE:
		return "EMC_AXIS_UNHOME";
	case EMC_COOLANT_FLOOD_OFF_TYPE:
		return "EMC_COOLANT_FLOOD_OFF";
	case EMC_COOLANT_FLOOD_ON_TYPE:
		return "EMC_COOLANT_FLOOD_ON";
	case EMC_COOLANT_MIST_OFF_TYPE:
		return "EMC_COOLANT_MIST_OFF";
	case EMC_COOLANT_MIST_ON_TYPE:
		return "EMC_COOLANT_MIST_ON";
	case EMC_COOLANT_STAT_TYPE:
		return "EMC_COOLANT_STAT";
	case EMC_EXEC_PLUGIN_CALL_TYPE:
		return "EMC_EXEC_PLUGIN_CALL";
	case EMC_HALT_TYPE:
		return "EMC_HALT";
	case EMC_INIT_TYPE:
		return "EMC_INIT";
	case EMC_IO_ABORT_TYPE:
		return "EMC_IO_ABORT";
	case EMC_IO_HALT_TYPE:
		return "EMC_IO_HALT";
	case EMC_IO_INIT_TYPE:
		return "EMC_IO_INIT";
	case EMC_IO_PLUGIN_CALL_TYPE:
		return "EMC_IO_PLUGIN_CALL";
	case EMC_IO_SET_CYCLE_TIME_TYPE:
		return "EMC_IO_SET_CYCLE_TIME";
	case EMC_IO_STAT_TYPE:
		return "EMC_IO_STAT";
	case EMC_LUBE_OFF_TYPE:
		return "EMC_LUBE_OFF";
	case EMC_LUBE_ON_TYPE:
		return "EMC_LUBE_ON";
	case EMC_LUBE_STAT_TYPE:
		return "EMC_LUBE_STAT";
	case EMC_MOTION_ABORT_TYPE:
		return "EMC_MOTION_ABORT";
	case EMC_MOTION_ADAPTIVE_TYPE:
		return "EMC_MOTION_ADAPTIVE";
	case EMC_MOTION_HALT_TYPE:
		return "EMC_MOTION_HALT";
	case EMC_MOTION_INIT_TYPE:
		return "EMC_MOTION_INIT";
	case EMC_MOTION_SET_AOUT_TYPE:
		return "EMC_MOTION_SET_AOUT";
	case EMC_MOTION_SET_DOUT_TYPE:
		return "EMC_MOTION_SET_DOUT";
	case EMC_MOTION_STAT_TYPE:
		return "EMC_MOTION_STAT";
	case EMC_NULL_TYPE:
		return "EMC_NULL";
	case EMC_OPERATOR_DISPLAY_TYPE:
		return "EMC_OPERATOR_DISPLAY";
	case EMC_OPERATOR_ERROR_TYPE:
		return "EMC_OPERATOR_ERROR";
	case EMC_OPERATOR_TEXT_TYPE:
		return "EMC_OPERATOR_TEXT";
	case EMC_SET_DEBUG_TYPE:
		return "EMC_SET_DEBUG";
	case EMC_SPINDLE_BRAKE_ENGAGE_TYPE:
		return "EMC_SPINDLE_BRAKE_ENGAGE";
	case EMC_SPINDLE_BRAKE_RELEASE_TYPE:
		return "EMC_SPINDLE_BRAKE_RELEASE";
	case EMC_SPINDLE_CONSTANT_TYPE:
		return "EMC_SPINDLE_CONSTANT";
	case EMC_SPINDLE_DECREASE_TYPE:
		return "EMC_SPINDLE_DECREASE";
	case EMC_SPINDLE_INCREASE_TYPE:
		return "EMC_SPINDLE_INCREASE";
	case EMC_SPINDLE_OFF_TYPE:
		return "EMC_SPINDLE_OFF";
	case EMC_SPINDLE_ON_TYPE:
		return "EMC_SPINDLE_ON";
	case EMC_SPINDLE_ORIENT_TYPE:
		return "EMC_SPINDLE_ORIENT";
	case EMC_SPINDLE_SPEED_TYPE:
		return "EMC_SPINDLE_SPEED";
	case EMC_SPINDLE_STAT_TYPE:
		return "EMC_SPINDLE_STAT";
	case EMC_SPINDLE_WAIT_ORIENT_COMPLETE_TYPE:
		return "EMC_SPINDLE_WAIT_ORIENT_COMPLETE";
	case EMC_STAT_TYPE:
		return "EMC_STAT";
	case EMC_SYSTEM_CMD_TYPE:
		return "EMC_SYSTEM_CMD";
	case EMC_TASK_ABORT_TYPE:
		return "EMC_TASK_ABORT";
	case EMC_TASK_HALT_TYPE:
		return "EMC_TASK_HALT";
	case EMC_TASK_INIT_TYPE:
		return "EMC_TASK_INIT";
	case EMC_TASK_PLAN_CLOSE_TYPE:
		return "EMC_TASK_PLAN_CLOSE";
	case EMC_TASK_PLAN_END_TYPE:
		return "EMC_TASK_PLAN_END";
	case EMC_TASK_PLAN_EXECUTE_TYPE:
		return "EMC_TASK_PLAN_EXECUTE";
	case EMC_TASK_PLAN_INIT_TYPE:
		return "EMC_TASK_PLAN_INIT";
	case EMC_TASK_PLAN_OPEN_TYPE:
		return "EMC_TASK_PLAN_OPEN";
	case EMC_TASK_PLAN_OPTIONAL_STOP_TYPE:
		return "EMC_TASK_PLAN_OPTIONAL_STOP";
	case EMC_TASK_PLAN_PAUSE_TYPE:
		return "EMC_TASK_PLAN_PAUSE";
	case EMC_TASK_PLAN_READ_TYPE:
		return "EMC_TASK_PLAN_READ";
	case EMC_TASK_PLAN_RESUME_TYPE:
		return "EMC_TASK_PLAN_RESUME";
	case EMC_TASK_PLAN_RUN_TYPE:
		return "EMC_TASK_PLAN_RUN";
	case EMC_TASK_PLAN_SET_BLOCK_DELETE_TYPE:
		return "EMC_TASK_PLAN_SET_BLOCK_DELETE";
	case EMC_TASK_PLAN_SET_OPTIONAL_STOP_TYPE:
		return "EMC_TASK_PLAN_SET_OPTIONAL_STOP";
	case EMC_TASK_PLAN_STEP_TYPE:
		return "EMC_TASK_PLAN_STEP";
	case EMC_TASK_PLAN_SYNCH_TYPE:
		return "EMC_TASK_PLAN_SYNCH";
	case EMC_TASK_SET_MODE_TYPE:
		return "EMC_TASK_SET_MODE";
	case EMC_TASK_SET_STATE_TYPE:
		return "EMC_TASK_SET_STATE";
	case EMC_TASK_STAT_TYPE:
		return "EMC_TASK_STAT";
	case EMC_TOOL_ABORT_TYPE:
		return "EMC_TOOL_ABORT";
	case EMC_TOOL_HALT_TYPE:
		return "EMC_TOOL_HALT";
	case EMC_TOOL_INIT_TYPE:
		return "EMC_TOOL_INIT";
	case EMC_TOOL_LOAD_TYPE:
		return "EMC_TOOL_LOAD";
	case EMC_TOOL_LOAD_TOOL_TABLE_TYPE:
		return "EMC_TOOL_LOAD_TOOL_TABLE";
	case EMC_TOOL_PREPARE_TYPE:
		return "EMC_TOOL_PREPARE";
	case EMC_TOOL_SET_NUMBER_TYPE:
		return "EMC_TOOL_SET_NUMBER";
	case EMC_TOOL_SET_OFFSET_TYPE:
		return "EMC_TOOL_SET_OFFSET";
	case EMC_TOOL_START_CHANGE_TYPE:
		return "EMC_TOOL_START_CHANGE";
	case EMC_TOOL_STAT_TYPE:
		return "EMC_TOOL_STAT";
	case EMC_TOOL_UNLOAD_TYPE:
		return "EMC_TOOL_UNLOAD";
	case EMC_TRAJ_ABORT_TYPE:
		return "EMC_TRAJ_ABORT";
	case EMC_TRAJ_CIRCULAR_MOVE_TYPE:
		return "EMC_TRAJ_CIRCULAR_MOVE";
	case EMC_TRAJ_CLEAR_PROBE_TRIPPED_FLAG_TYPE:
		return "EMC_TRAJ_CLEAR_PROBE_TRIPPED_FLAG";
	case EMC_TRAJ_DELAY_TYPE:
		return "EMC_TRAJ_DELAY";
	case EMC_TRAJ_DISABLE_TYPE:
		return "EMC_TRAJ_DISABLE";
	case EMC_TRAJ_ENABLE_TYPE:
		return "EMC_TRAJ_ENABLE";
	case EMC_TRAJ_HALT_TYPE:
		return "EMC_TRAJ_HALT";
	case EMC_TRAJ_INIT_TYPE:
		return "EMC_TRAJ_INIT";
	case EMC_TRAJ_LINEAR_MOVE_TYPE:
		return "EMC_TRAJ_LINEAR_MOVE";
	case EMC_TRAJ_PAUSE_TYPE:
		return "EMC_TRAJ_PAUSE";
	case EMC_TRAJ_PROBE_TYPE:
		return "EMC_TRAJ_PROBE";
	case EMC_TRAJ_RESUME_TYPE:
		return "EMC_TRAJ_RESUME";
	case EMC_TRAJ_RIGID_TAP_TYPE:
		return "EMC_TRAJ_RIGID_TAP";
	case EMC_TRAJ_SET_ACCELERATION_TYPE:
		return "EMC_TRAJ_SET_ACCELERATION";
	case EMC_TRAJ_SET_AXES_TYPE:
		return "EMC_TRAJ_SET_AXES";
	case EMC_TRAJ_SET_CYCLE_TIME_TYPE:
		return "EMC_TRAJ_SET_CYCLE_TIME";
	case EMC_TRAJ_SET_FH_ENABLE_TYPE:
		return "EMC_TRAJ_SET_FH_ENABLE";
	case EMC_TRAJ_SET_FO_ENABLE_TYPE:
		return "EMC_TRAJ_SET_FO_ENABLE";
	case EMC_TRAJ_SET_G5X_TYPE:
		return "EMC_TRAJ_SET_G5X";
	case EMC_TRAJ_SET_G92_TYPE:
		return "EMC_TRAJ_SET_G92";
	case EMC_TRAJ_SET_HOME_TYPE:
		return "EMC_TRAJ_SET_HOME";
	case EMC_TRAJ_SET_MAX_ACCELERATION_TYPE:
		return "EMC_TRAJ_SET_MAX_ACCELERATION";
	case EMC_TRAJ_SET_MAX_VELOCITY_TYPE:
		return "EMC_TRAJ_SET_MAX_VELOCITY";
	case EMC_TRAJ_SET_MODE_TYPE:
		return "EMC_TRAJ_SET_MODE";
	case EMC_TRAJ_SET_MOTION_ID_TYPE:
		return "EMC_TRAJ_SET_MOTION_ID";
	case EMC_TRAJ_SET_OFFSET_TYPE:
		return "EMC_TRAJ_SET_OFFSET";
	case EMC_TRAJ_SET_RAPID_SCALE_TYPE:
		return "EMC_TRAJ_SET_RAPID_SCALE";
	case EMC_TRAJ_SET_ROTATION_TYPE:
		return "EMC_TRAJ_SET_ROTATION";
	case EMC_TRAJ_SET_SCALE_TYPE:
		return "EMC_TRAJ_SET_SCALE";
	case EMC_TRAJ_SET_SO_ENABLE_TYPE:
		return "EMC_TRAJ_SET_SO_ENABLE";
	case EMC_TRAJ_SET_SPINDLESYNC_TYPE:
		return "EMC_TRAJ_SET_SPINDLESYNC";
	case EMC_TRAJ_SET_SPINDLE_SCALE_TYPE:
		return "EMC_TRAJ_SET_SPINDLE_SCALE";
	case EMC_TRAJ_SET_TELEOP_ENABLE_TYPE:
		return "EMC_TRAJ_SET_TELEOP_ENABLE";
	case EMC_TRAJ_SET_TELEOP_VECTOR_TYPE:
		return "EMC_TRAJ_SET_TELEOP_VECTOR";
	case EMC_TRAJ_SET_TERM_COND_TYPE:
		return "EMC_TRAJ_SET_TERM_COND";
	case EMC_TRAJ_SET_UNITS_TYPE:
		return "EMC_TRAJ_SET_UNITS";
	case EMC_TRAJ_SET_VELOCITY_TYPE:
		return "EMC_TRAJ_SET_VELOCITY";
	case EMC_TRAJ_STAT_TYPE:
		return "EMC_TRAJ_STAT";
	case EMC_TRAJ_STEP_TYPE:
		return "EMC_TRAJ_STEP";
	default:
		return"UNKNOWN";
		break;
	}
	return(NULL);
}

/*
*	NML/CMS Update function for CANON_TOOL_TABLE
*	from /home/leiyang/playground/mk_intf/src/emctool.h:20
*/
void nmlupdate(CMS *cms,CANON_TOOL_TABLE *x)
{

	cms->beginClass("CANON_TOOL_TABLE",0);
	cms->update_with_name("toolno",x->toolno);
	cms->beginClassVar("offset");
	nmlupdate(cms,((EmcPose *)&(x->offset)));
	cms->endClassVar("offset");
	cms->update_with_name("diameter",x->diameter);
	cms->update_with_name("frontangle",x->frontangle);
	cms->update_with_name("backangle",x->backangle);

	cms->endClass("CANON_TOOL_TABLE",0);

}


/*
*	NML/CMS Update function for CANON_VECTOR
*	from /home/leiyang/playground/mk_intf/src/depend_struct.hh:34
*/
void nmlupdate(CMS *cms,CANON_VECTOR *x)
{

	cms->beginClass("CANON_VECTOR",0);
	cms->update_with_name("x",x->x);
	cms->update_with_name("y",x->y);
	cms->update_with_name("z",x->z);

	cms->endClass("CANON_VECTOR",0);

}


/*
*	NML/CMS Update function for CONTROL_POINT
*	from /home/leiyang/playground/mk_intf/src/depend_struct.hh:25
*/
void nmlupdate(CMS *cms,CONTROL_POINT *x)
{

	cms->beginClass("CONTROL_POINT",0);
	cms->update_with_name("X",x->X);
	cms->update_with_name("Y",x->Y);
	cms->update_with_name("W",x->W);

	cms->endClass("CONTROL_POINT",0);

}


/*
*	NML/CMS Update function for EMC_ABORT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:2074
*/
void EMC_ABORT::update(CMS *cms)
{

	cms->beginClass("EMC_ABORT","EMC_CMD_MSG");

	cms->beginBaseClass("EMC_CMD_MSG");
	EMC_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_CMD_MSG");


	cms->endClass("EMC_ABORT","EMC_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AUX_CMD_MSG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1616
*/
void EMC_AUX_CMD_MSG::update(CMS *cms)
{

	cms->beginClass("EMC_AUX_CMD_MSG","RCS_CMD_MSG");
	RCS_CMD_MSG::update_cmd_msg_base(cms);

	cms->endClass("EMC_AUX_CMD_MSG","RCS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AUX_ESTOP_OFF
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1638
*/
void EMC_AUX_ESTOP_OFF::update(CMS *cms)
{

	cms->beginClass("EMC_AUX_ESTOP_OFF","EMC_AUX_CMD_MSG");

	cms->beginBaseClass("EMC_AUX_CMD_MSG");
	EMC_AUX_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AUX_CMD_MSG");


	cms->endClass("EMC_AUX_ESTOP_OFF","EMC_AUX_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AUX_ESTOP_ON
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1628
*/
void EMC_AUX_ESTOP_ON::update(CMS *cms)
{

	cms->beginClass("EMC_AUX_ESTOP_ON","EMC_AUX_CMD_MSG");

	cms->beginBaseClass("EMC_AUX_CMD_MSG");
	EMC_AUX_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AUX_CMD_MSG");


	cms->endClass("EMC_AUX_ESTOP_ON","EMC_AUX_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AUX_ESTOP_RESET
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1648
*/
void EMC_AUX_ESTOP_RESET::update(CMS *cms)
{

	cms->beginClass("EMC_AUX_ESTOP_RESET","EMC_AUX_CMD_MSG");

	cms->beginBaseClass("EMC_AUX_CMD_MSG");
	EMC_AUX_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AUX_CMD_MSG");


	cms->endClass("EMC_AUX_ESTOP_RESET","EMC_AUX_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AUX_INPUT_WAIT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1658
*/
void EMC_AUX_INPUT_WAIT::update(CMS *cms)
{

	cms->beginClass("EMC_AUX_INPUT_WAIT","EMC_AUX_CMD_MSG");

	cms->beginBaseClass("EMC_AUX_CMD_MSG");
	EMC_AUX_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AUX_CMD_MSG");

	cms->update_with_name("index",index);
	cms->update_with_name("input_type",input_type);
	cms->update_with_name("wait_type",wait_type);
	cms->update_with_name("timeout",timeout);

	cms->endClass("EMC_AUX_INPUT_WAIT","EMC_AUX_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AUX_STAT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1684
*/
void EMC_AUX_STAT::update(CMS *cms)
{

	cms->beginClass("EMC_AUX_STAT","EMC_AUX_STAT_MSG");

	cms->beginBaseClass("EMC_AUX_STAT_MSG");
	EMC_AUX_STAT_MSG::update(cms);
	cms->endBaseClass("EMC_AUX_STAT_MSG");

	cms->update_with_name("estop",estop);

	cms->endClass("EMC_AUX_STAT","EMC_AUX_STAT_MSG");

}


/*
*	NML/CMS Update function for EMC_AUX_STAT_MSG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1673
*/
void EMC_AUX_STAT_MSG::update(CMS *cms)
{

	cms->beginClass("EMC_AUX_STAT_MSG","RCS_STAT_MSG");

	//RCS_STAT_MSG::update_stat_msg_base(cms);

	cms->endClass("EMC_AUX_STAT_MSG","RCS_STAT_MSG");

}


/*
*	NML/CMS Update function for EMC_AXIS_ABORT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:311
*/
void EMC_AXIS_ABORT::update(CMS *cms)
{

	cms->beginClass("EMC_AXIS_ABORT","EMC_AXIS_CMD_MSG");

	cms->beginBaseClass("EMC_AXIS_CMD_MSG");
	EMC_AXIS_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AXIS_CMD_MSG");


	cms->endClass("EMC_AXIS_ABORT","EMC_AXIS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AXIS_ABS_JOG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:386
*/
void EMC_AXIS_ABS_JOG::update(CMS *cms)
{

	cms->beginClass("EMC_AXIS_ABS_JOG","EMC_AXIS_CMD_MSG");

	cms->beginBaseClass("EMC_AXIS_CMD_MSG");
	EMC_AXIS_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AXIS_CMD_MSG");

	cms->update_with_name("pos",pos);
	cms->update_with_name("vel",vel);

	cms->endClass("EMC_AXIS_ABS_JOG","EMC_AXIS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AXIS_ACTIVATE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:399
*/
void EMC_AXIS_ACTIVATE::update(CMS *cms)
{

	cms->beginClass("EMC_AXIS_ACTIVATE","EMC_AXIS_CMD_MSG");

	cms->beginBaseClass("EMC_AXIS_CMD_MSG");
	EMC_AXIS_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AXIS_CMD_MSG");


	cms->endClass("EMC_AXIS_ACTIVATE","EMC_AXIS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AXIS_CMD_MSG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:131
*/
void EMC_AXIS_CMD_MSG::update(CMS *cms)
{

	cms->beginClass("EMC_AXIS_CMD_MSG","RCS_CMD_MSG");
	RCS_CMD_MSG::update_cmd_msg_base(cms);
	cms->update_with_name("axis",axis);

	cms->endClass("EMC_AXIS_CMD_MSG","RCS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AXIS_DEACTIVATE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:409
*/
void EMC_AXIS_DEACTIVATE::update(CMS *cms)
{

	cms->beginClass("EMC_AXIS_DEACTIVATE","EMC_AXIS_CMD_MSG");

	cms->beginBaseClass("EMC_AXIS_CMD_MSG");
	EMC_AXIS_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AXIS_CMD_MSG");


	cms->endClass("EMC_AXIS_DEACTIVATE","EMC_AXIS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AXIS_DISABLE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:331
*/
void EMC_AXIS_DISABLE::update(CMS *cms)
{

	cms->beginClass("EMC_AXIS_DISABLE","EMC_AXIS_CMD_MSG");

	cms->beginBaseClass("EMC_AXIS_CMD_MSG");
	EMC_AXIS_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AXIS_CMD_MSG");


	cms->endClass("EMC_AXIS_DISABLE","EMC_AXIS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AXIS_ENABLE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:321
*/
void EMC_AXIS_ENABLE::update(CMS *cms)
{

	cms->beginClass("EMC_AXIS_ENABLE","EMC_AXIS_CMD_MSG");

	cms->beginBaseClass("EMC_AXIS_CMD_MSG");
	EMC_AXIS_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AXIS_CMD_MSG");


	cms->endClass("EMC_AXIS_ENABLE","EMC_AXIS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AXIS_HALT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:301
*/
void EMC_AXIS_HALT::update(CMS *cms)
{

	cms->beginClass("EMC_AXIS_HALT","EMC_AXIS_CMD_MSG");

	cms->beginBaseClass("EMC_AXIS_CMD_MSG");
	EMC_AXIS_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AXIS_CMD_MSG");


	cms->endClass("EMC_AXIS_HALT","EMC_AXIS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AXIS_HOME
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:341
*/
void EMC_AXIS_HOME::update(CMS *cms)
{

	cms->beginClass("EMC_AXIS_HOME","EMC_AXIS_CMD_MSG");

	cms->beginBaseClass("EMC_AXIS_CMD_MSG");
	EMC_AXIS_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AXIS_CMD_MSG");


	cms->endClass("EMC_AXIS_HOME","EMC_AXIS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AXIS_INCR_JOG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:373
*/
void EMC_AXIS_INCR_JOG::update(CMS *cms)
{

	cms->beginClass("EMC_AXIS_INCR_JOG","EMC_AXIS_CMD_MSG");

	cms->beginBaseClass("EMC_AXIS_CMD_MSG");
	EMC_AXIS_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AXIS_CMD_MSG");

	cms->update_with_name("incr",incr);
	cms->update_with_name("vel",vel);

	cms->endClass("EMC_AXIS_INCR_JOG","EMC_AXIS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AXIS_INIT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:291
*/
void EMC_AXIS_INIT::update(CMS *cms)
{

	cms->beginClass("EMC_AXIS_INIT","EMC_AXIS_CMD_MSG");

	cms->beginBaseClass("EMC_AXIS_CMD_MSG");
	EMC_AXIS_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AXIS_CMD_MSG");


	cms->endClass("EMC_AXIS_INIT","EMC_AXIS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AXIS_JOG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:361
*/
void EMC_AXIS_JOG::update(CMS *cms)
{

	cms->beginClass("EMC_AXIS_JOG","EMC_AXIS_CMD_MSG");

	cms->beginBaseClass("EMC_AXIS_CMD_MSG");
	EMC_AXIS_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AXIS_CMD_MSG");

	cms->update_with_name("vel",vel);

	cms->endClass("EMC_AXIS_JOG","EMC_AXIS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AXIS_LOAD_COMP
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:429
*/
void EMC_AXIS_LOAD_COMP::update(CMS *cms)
{

	cms->beginClass("EMC_AXIS_LOAD_COMP","EMC_AXIS_CMD_MSG");

	cms->beginBaseClass("EMC_AXIS_CMD_MSG");
	EMC_AXIS_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AXIS_CMD_MSG");

	cms->update_with_name("file",file,255);
	cms->update_with_name("type",type);

	cms->endClass("EMC_AXIS_LOAD_COMP","EMC_AXIS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AXIS_OVERRIDE_LIMITS
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:419
*/
void EMC_AXIS_OVERRIDE_LIMITS::update(CMS *cms)
{

	cms->beginClass("EMC_AXIS_OVERRIDE_LIMITS","EMC_AXIS_CMD_MSG");

	cms->beginBaseClass("EMC_AXIS_CMD_MSG");
	EMC_AXIS_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AXIS_CMD_MSG");


	cms->endClass("EMC_AXIS_OVERRIDE_LIMITS","EMC_AXIS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AXIS_SET_AXIS
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:153
*/
void EMC_AXIS_SET_AXIS::update(CMS *cms)
{

	cms->beginClass("EMC_AXIS_SET_AXIS","EMC_AXIS_CMD_MSG");

	cms->beginBaseClass("EMC_AXIS_CMD_MSG");
	EMC_AXIS_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AXIS_CMD_MSG");

	cms->update_with_name("axisType",axisType);

	cms->endClass("EMC_AXIS_SET_AXIS","EMC_AXIS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AXIS_SET_BACKLASH
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:187
*/
void EMC_AXIS_SET_BACKLASH::update(CMS *cms)
{

	cms->beginClass("EMC_AXIS_SET_BACKLASH","EMC_AXIS_CMD_MSG");

	cms->beginBaseClass("EMC_AXIS_CMD_MSG");
	EMC_AXIS_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AXIS_CMD_MSG");

	cms->update_with_name("backlash",backlash);

	cms->endClass("EMC_AXIS_SET_BACKLASH","EMC_AXIS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AXIS_SET_FERROR
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:231
*/
void EMC_AXIS_SET_FERROR::update(CMS *cms)
{

	cms->beginClass("EMC_AXIS_SET_FERROR","EMC_AXIS_CMD_MSG");

	cms->beginBaseClass("EMC_AXIS_CMD_MSG");
	EMC_AXIS_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AXIS_CMD_MSG");

	cms->update_with_name("ferror",ferror);

	cms->endClass("EMC_AXIS_SET_FERROR","EMC_AXIS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AXIS_SET_HOMING_PARAMS
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:255
*/
void EMC_AXIS_SET_HOMING_PARAMS::update(CMS *cms)
{

	cms->beginClass("EMC_AXIS_SET_HOMING_PARAMS","EMC_AXIS_CMD_MSG");

	cms->beginBaseClass("EMC_AXIS_CMD_MSG");
	EMC_AXIS_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AXIS_CMD_MSG");

	cms->update_with_name("home",home);
	cms->update_with_name("offset",offset);
	cms->update_with_name("home_final_vel",home_final_vel);
	cms->update_with_name("search_vel",search_vel);
	cms->update_with_name("latch_vel",latch_vel);
	cms->update_with_name("use_index",use_index);
	cms->update_with_name("ignore_limits",ignore_limits);
	cms->update_with_name("is_shared",is_shared);
	cms->update_with_name("home_sequence",home_sequence);
	cms->update_with_name("volatile_home",volatile_home);
	cms->update_with_name("locking_indexer",locking_indexer);

	cms->endClass("EMC_AXIS_SET_HOMING_PARAMS","EMC_AXIS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AXIS_SET_MAX_POSITION_LIMIT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:218
*/
void EMC_AXIS_SET_MAX_POSITION_LIMIT::update(CMS *cms)
{

	cms->beginClass("EMC_AXIS_SET_MAX_POSITION_LIMIT","EMC_AXIS_CMD_MSG");

	cms->beginBaseClass("EMC_AXIS_CMD_MSG");
	EMC_AXIS_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AXIS_CMD_MSG");

	cms->update_with_name("limit",limit);

	cms->endClass("EMC_AXIS_SET_MAX_POSITION_LIMIT","EMC_AXIS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AXIS_SET_MAX_VELOCITY
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:278
*/
void EMC_AXIS_SET_MAX_VELOCITY::update(CMS *cms)
{

	cms->beginClass("EMC_AXIS_SET_MAX_VELOCITY","EMC_AXIS_CMD_MSG");

	cms->beginBaseClass("EMC_AXIS_CMD_MSG");
	EMC_AXIS_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AXIS_CMD_MSG");

	cms->update_with_name("vel",vel);

	cms->endClass("EMC_AXIS_SET_MAX_VELOCITY","EMC_AXIS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AXIS_SET_MIN_FERROR
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:243
*/
void EMC_AXIS_SET_MIN_FERROR::update(CMS *cms)
{

	cms->beginClass("EMC_AXIS_SET_MIN_FERROR","EMC_AXIS_CMD_MSG");

	cms->beginBaseClass("EMC_AXIS_CMD_MSG");
	EMC_AXIS_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AXIS_CMD_MSG");

	cms->update_with_name("ferror",ferror);

	cms->endClass("EMC_AXIS_SET_MIN_FERROR","EMC_AXIS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AXIS_SET_MIN_POSITION_LIMIT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:205
*/
void EMC_AXIS_SET_MIN_POSITION_LIMIT::update(CMS *cms)
{

	cms->beginClass("EMC_AXIS_SET_MIN_POSITION_LIMIT","EMC_AXIS_CMD_MSG");

	cms->beginBaseClass("EMC_AXIS_CMD_MSG");
	EMC_AXIS_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AXIS_CMD_MSG");

	cms->update_with_name("limit",limit);

	cms->endClass("EMC_AXIS_SET_MIN_POSITION_LIMIT","EMC_AXIS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AXIS_SET_UNITS
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:170
*/
void EMC_AXIS_SET_UNITS::update(CMS *cms)
{

	cms->beginClass("EMC_AXIS_SET_UNITS","EMC_AXIS_CMD_MSG");

	cms->beginBaseClass("EMC_AXIS_CMD_MSG");
	EMC_AXIS_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AXIS_CMD_MSG");

	cms->update_with_name("units",units);

	cms->endClass("EMC_AXIS_SET_UNITS","EMC_AXIS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_AXIS_STAT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:456
*/
void EMC_AXIS_STAT::update(CMS *cms)
{

	cms->beginClass("EMC_AXIS_STAT","EMC_AXIS_STAT_MSG");

	cms->beginBaseClass("EMC_AXIS_STAT_MSG");
	EMC_AXIS_STAT_MSG::update(cms);
	cms->endBaseClass("EMC_AXIS_STAT_MSG");

	cms->update_with_name("axisType",axisType);
	cms->update_with_name("units",units);
	cms->update_with_name("backlash",backlash);
	cms->update_with_name("minPositionLimit",minPositionLimit);
	cms->update_with_name("maxPositionLimit",maxPositionLimit);
	cms->update_with_name("maxFerror",maxFerror);
	cms->update_with_name("minFerror",minFerror);
	cms->update_with_name("ferrorCurrent",ferrorCurrent);
	cms->update_with_name("ferrorHighMark",ferrorHighMark);
	cms->update_with_name("output",output);
	cms->update_with_name("input",input);
	cms->update_with_name("velocity",velocity);
	cms->update_with_name("inpos",inpos);
	cms->update_with_name("homing",homing);
	cms->update_with_name("homed",homed);
	cms->update_with_name("fault",fault);
	cms->update_with_name("enabled",enabled);
	cms->update_with_name("minSoftLimit",minSoftLimit);
	cms->update_with_name("maxSoftLimit",maxSoftLimit);
	cms->update_with_name("minHardLimit",minHardLimit);
	cms->update_with_name("maxHardLimit",maxHardLimit);
	cms->update_with_name("overrideLimits",overrideLimits);

	cms->endClass("EMC_AXIS_STAT","EMC_AXIS_STAT_MSG");

}


/*
*	NML/CMS Update function for EMC_AXIS_STAT_MSG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:443
*/
void EMC_AXIS_STAT_MSG::update(CMS *cms)
{

	cms->beginClass("EMC_AXIS_STAT_MSG","RCS_STAT_MSG");

	//RCS_STAT_MSG::update_stat_msg_base(cms);
	cms->update_with_name("axis",axis);

	cms->endClass("EMC_AXIS_STAT_MSG","RCS_STAT_MSG");

}


/*
*	NML/CMS Update function for EMC_AXIS_UNHOME
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:351
*/
void EMC_AXIS_UNHOME::update(CMS *cms)
{

	cms->beginClass("EMC_AXIS_UNHOME","EMC_AXIS_CMD_MSG");

	cms->beginBaseClass("EMC_AXIS_CMD_MSG");
	EMC_AXIS_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_AXIS_CMD_MSG");


	cms->endClass("EMC_AXIS_UNHOME","EMC_AXIS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_CMD_MSG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:2044
*/
void EMC_CMD_MSG::update(CMS *cms)
{

	cms->beginClass("EMC_CMD_MSG","RCS_CMD_MSG");
	RCS_CMD_MSG::update_cmd_msg_base(cms);

	cms->endClass("EMC_CMD_MSG","RCS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_COOLANT_CMD_MSG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1828
*/
void EMC_COOLANT_CMD_MSG::update(CMS *cms)
{

	cms->beginClass("EMC_COOLANT_CMD_MSG","RCS_CMD_MSG");
	RCS_CMD_MSG::update_cmd_msg_base(cms);

	cms->endClass("EMC_COOLANT_CMD_MSG","RCS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_COOLANT_FLOOD_OFF
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1873
*/
void EMC_COOLANT_FLOOD_OFF::update(CMS *cms)
{

	cms->beginClass("EMC_COOLANT_FLOOD_OFF","EMC_COOLANT_CMD_MSG");

	cms->beginBaseClass("EMC_COOLANT_CMD_MSG");
	EMC_COOLANT_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_COOLANT_CMD_MSG");


	cms->endClass("EMC_COOLANT_FLOOD_OFF","EMC_COOLANT_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_COOLANT_FLOOD_ON
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1862
*/
void EMC_COOLANT_FLOOD_ON::update(CMS *cms)
{

	cms->beginClass("EMC_COOLANT_FLOOD_ON","EMC_COOLANT_CMD_MSG");

	cms->beginBaseClass("EMC_COOLANT_CMD_MSG");
	EMC_COOLANT_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_COOLANT_CMD_MSG");


	cms->endClass("EMC_COOLANT_FLOOD_ON","EMC_COOLANT_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_COOLANT_MIST_OFF
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1851
*/
void EMC_COOLANT_MIST_OFF::update(CMS *cms)
{

	cms->beginClass("EMC_COOLANT_MIST_OFF","EMC_COOLANT_CMD_MSG");

	cms->beginBaseClass("EMC_COOLANT_CMD_MSG");
	EMC_COOLANT_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_COOLANT_CMD_MSG");


	cms->endClass("EMC_COOLANT_MIST_OFF","EMC_COOLANT_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_COOLANT_MIST_ON
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1840
*/
void EMC_COOLANT_MIST_ON::update(CMS *cms)
{

	cms->beginClass("EMC_COOLANT_MIST_ON","EMC_COOLANT_CMD_MSG");

	cms->beginBaseClass("EMC_COOLANT_CMD_MSG");
	EMC_COOLANT_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_COOLANT_CMD_MSG");


	cms->endClass("EMC_COOLANT_MIST_ON","EMC_COOLANT_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_COOLANT_STAT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1894
*/
void EMC_COOLANT_STAT::update(CMS *cms)
{

	cms->beginClass("EMC_COOLANT_STAT","EMC_COOLANT_STAT_MSG");

	cms->beginBaseClass("EMC_COOLANT_STAT_MSG");
	EMC_COOLANT_STAT_MSG::update(cms);
	cms->endBaseClass("EMC_COOLANT_STAT_MSG");

	cms->update_with_name("mist",mist);
	cms->update_with_name("flood",flood);

	cms->endClass("EMC_COOLANT_STAT","EMC_COOLANT_STAT_MSG");

}


/*
*	NML/CMS Update function for EMC_COOLANT_STAT_MSG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1884
*/
void EMC_COOLANT_STAT_MSG::update(CMS *cms)
{

	cms->beginClass("EMC_COOLANT_STAT_MSG","RCS_STAT_MSG");

	//RCS_STAT_MSG::update_stat_msg_base(cms);

	cms->endClass("EMC_COOLANT_STAT_MSG","RCS_STAT_MSG");

}


/*
*	NML/CMS Update function for EMC_EXEC_PLUGIN_CALL
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:2083
*/
void EMC_EXEC_PLUGIN_CALL::update(CMS *cms)
{

	cms->beginClass("EMC_EXEC_PLUGIN_CALL","EMC_CMD_MSG");

	cms->beginBaseClass("EMC_CMD_MSG");
	EMC_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_CMD_MSG");

	cms->update_with_name("len",len);
	cms->update_with_name("call",call,900);

	cms->endClass("EMC_EXEC_PLUGIN_CALL","EMC_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_HALT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:2065
*/
void EMC_HALT::update(CMS *cms)
{

	cms->beginClass("EMC_HALT","EMC_CMD_MSG");

	cms->beginBaseClass("EMC_CMD_MSG");
	EMC_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_CMD_MSG");


	cms->endClass("EMC_HALT","EMC_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_INIT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:2056
*/
void EMC_INIT::update(CMS *cms)
{

	cms->beginClass("EMC_INIT","EMC_CMD_MSG");

	cms->beginBaseClass("EMC_CMD_MSG");
	EMC_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_CMD_MSG");


	cms->endClass("EMC_INIT","EMC_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_IO_ABORT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1987
*/
void EMC_IO_ABORT::update(CMS *cms)
{

	cms->beginClass("EMC_IO_ABORT","EMC_IO_CMD_MSG");

	cms->beginBaseClass("EMC_IO_CMD_MSG");
	EMC_IO_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_IO_CMD_MSG");


	cms->endClass("EMC_IO_ABORT","EMC_IO_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_IO_CMD_MSG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1957
*/
void EMC_IO_CMD_MSG::update(CMS *cms)
{

	cms->beginClass("EMC_IO_CMD_MSG","RCS_CMD_MSG");
	RCS_CMD_MSG::update_cmd_msg_base(cms);

	cms->endClass("EMC_IO_CMD_MSG","RCS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_IO_HALT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1978
*/
void EMC_IO_HALT::update(CMS *cms)
{

	cms->beginClass("EMC_IO_HALT","EMC_IO_CMD_MSG");

	cms->beginBaseClass("EMC_IO_CMD_MSG");
	EMC_IO_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_IO_CMD_MSG");


	cms->endClass("EMC_IO_HALT","EMC_IO_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_IO_INIT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1969
*/
void EMC_IO_INIT::update(CMS *cms)
{

	cms->beginClass("EMC_IO_INIT","EMC_IO_CMD_MSG");

	cms->beginBaseClass("EMC_IO_CMD_MSG");
	EMC_IO_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_IO_CMD_MSG");


	cms->endClass("EMC_IO_INIT","EMC_IO_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_IO_PLUGIN_CALL
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:2098
*/
void EMC_IO_PLUGIN_CALL::update(CMS *cms)
{

	cms->beginClass("EMC_IO_PLUGIN_CALL","EMC_CMD_MSG");

	cms->beginBaseClass("EMC_CMD_MSG");
	EMC_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_CMD_MSG");

	cms->update_with_name("len",len);
	cms->update_with_name("call",call,900);

	cms->endClass("EMC_IO_PLUGIN_CALL","EMC_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_IO_SET_CYCLE_TIME
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1996
*/
void EMC_IO_SET_CYCLE_TIME::update(CMS *cms)
{

	cms->beginClass("EMC_IO_SET_CYCLE_TIME","EMC_IO_CMD_MSG");

	cms->beginBaseClass("EMC_IO_CMD_MSG");
	EMC_IO_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_IO_CMD_MSG");

	cms->update_with_name("cycleTime",cycleTime);

	cms->endClass("EMC_IO_SET_CYCLE_TIME","EMC_IO_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_IO_STAT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:2021
*/
void EMC_IO_STAT::update(CMS *cms)
{

	cms->beginClass("EMC_IO_STAT","EMC_IO_STAT_MSG");

	cms->beginBaseClass("EMC_IO_STAT_MSG");
	EMC_IO_STAT_MSG::update(cms);
	cms->endBaseClass("EMC_IO_STAT_MSG");

	cms->update_with_name("cycleTime",cycleTime);
	cms->update_with_name("debug",debug);
	cms->beginClassVar("tool");
	tool.update(cms);
	cms->endClassVar("tool");
	cms->beginClassVar("coolant");
	coolant.update(cms);
	cms->endClassVar("coolant");
	cms->beginClassVar("aux");
	aux.update(cms);
	cms->endClassVar("aux");
	cms->beginClassVar("lube");
	lube.update(cms);
	cms->endClassVar("lube");

	cms->endClass("EMC_IO_STAT","EMC_IO_STAT_MSG");

}


/*
*	NML/CMS Update function for EMC_IO_STAT_MSG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:2008
*/
void EMC_IO_STAT_MSG::update(CMS *cms)
{

	cms->beginClass("EMC_IO_STAT_MSG","RCS_STAT_MSG");

	//RCS_STAT_MSG::update_stat_msg_base(cms);
	cms->update_with_name("heartbeat",heartbeat);

	cms->endClass("EMC_IO_STAT_MSG","RCS_STAT_MSG");

}


/*
*	NML/CMS Update function for EMC_LUBE_CMD_MSG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1905
*/
void EMC_LUBE_CMD_MSG::update(CMS *cms)
{

	cms->beginClass("EMC_LUBE_CMD_MSG","RCS_CMD_MSG");
	RCS_CMD_MSG::update_cmd_msg_base(cms);

	cms->endClass("EMC_LUBE_CMD_MSG","RCS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_LUBE_OFF
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1926
*/
void EMC_LUBE_OFF::update(CMS *cms)
{

	cms->beginClass("EMC_LUBE_OFF","EMC_LUBE_CMD_MSG");

	cms->beginBaseClass("EMC_LUBE_CMD_MSG");
	EMC_LUBE_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_LUBE_CMD_MSG");


	cms->endClass("EMC_LUBE_OFF","EMC_LUBE_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_LUBE_ON
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1917
*/
void EMC_LUBE_ON::update(CMS *cms)
{

	cms->beginClass("EMC_LUBE_ON","EMC_LUBE_CMD_MSG");

	cms->beginBaseClass("EMC_LUBE_CMD_MSG");
	EMC_LUBE_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_LUBE_CMD_MSG");


	cms->endClass("EMC_LUBE_ON","EMC_LUBE_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_LUBE_STAT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1946
*/
void EMC_LUBE_STAT::update(CMS *cms)
{

	cms->beginClass("EMC_LUBE_STAT","EMC_LUBE_STAT_MSG");

	cms->beginBaseClass("EMC_LUBE_STAT_MSG");
	EMC_LUBE_STAT_MSG::update(cms);
	cms->endBaseClass("EMC_LUBE_STAT_MSG");

	cms->update_with_name("on",on);
	cms->update_with_name("level",level);

	cms->endClass("EMC_LUBE_STAT","EMC_LUBE_STAT_MSG");

}


/*
*	NML/CMS Update function for EMC_LUBE_STAT_MSG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1936
*/
void EMC_LUBE_STAT_MSG::update(CMS *cms)
{

	cms->beginClass("EMC_LUBE_STAT_MSG","RCS_STAT_MSG");

	//RCS_STAT_MSG::update_stat_msg_base(cms);

	cms->endClass("EMC_LUBE_STAT_MSG","RCS_STAT_MSG");

}


/*
*	NML/CMS Update function for EMC_MOTION_ABORT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1074
*/
void EMC_MOTION_ABORT::update(CMS *cms)
{

	cms->beginClass("EMC_MOTION_ABORT","EMC_MOTION_CMD_MSG");

	cms->beginBaseClass("EMC_MOTION_CMD_MSG");
	EMC_MOTION_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_MOTION_CMD_MSG");


	cms->endClass("EMC_MOTION_ABORT","EMC_MOTION_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_MOTION_ADAPTIVE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1114
*/
void EMC_MOTION_ADAPTIVE::update(CMS *cms)
{

	cms->beginClass("EMC_MOTION_ADAPTIVE","EMC_MOTION_CMD_MSG");

	cms->beginBaseClass("EMC_MOTION_CMD_MSG");
	EMC_MOTION_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_MOTION_CMD_MSG");

	cms->update_with_name("status",status);

	cms->endClass("EMC_MOTION_ADAPTIVE","EMC_MOTION_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_MOTION_CMD_MSG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1042
*/
void EMC_MOTION_CMD_MSG::update(CMS *cms)
{

	cms->beginClass("EMC_MOTION_CMD_MSG","RCS_CMD_MSG");
	RCS_CMD_MSG::update_cmd_msg_base(cms);

	cms->endClass("EMC_MOTION_CMD_MSG","RCS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_MOTION_HALT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1064
*/
void EMC_MOTION_HALT::update(CMS *cms)
{

	cms->beginClass("EMC_MOTION_HALT","EMC_MOTION_CMD_MSG");

	cms->beginBaseClass("EMC_MOTION_CMD_MSG");
	EMC_MOTION_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_MOTION_CMD_MSG");


	cms->endClass("EMC_MOTION_HALT","EMC_MOTION_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_MOTION_INIT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1054
*/
void EMC_MOTION_INIT::update(CMS *cms)
{

	cms->beginClass("EMC_MOTION_INIT","EMC_MOTION_CMD_MSG");

	cms->beginBaseClass("EMC_MOTION_CMD_MSG");
	EMC_MOTION_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_MOTION_CMD_MSG");


	cms->endClass("EMC_MOTION_INIT","EMC_MOTION_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_MOTION_SET_AOUT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1084
*/
void EMC_MOTION_SET_AOUT::update(CMS *cms)
{

	cms->beginClass("EMC_MOTION_SET_AOUT","EMC_MOTION_CMD_MSG");

	cms->beginBaseClass("EMC_MOTION_CMD_MSG");
	EMC_MOTION_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_MOTION_CMD_MSG");

	cms->update_with_name("index",index);
	cms->update_with_name("start",start);
	cms->update_with_name("end",end);
	cms->update_with_name("now",now);

	cms->endClass("EMC_MOTION_SET_AOUT","EMC_MOTION_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_MOTION_SET_DOUT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1099
*/
void EMC_MOTION_SET_DOUT::update(CMS *cms)
{

	cms->beginClass("EMC_MOTION_SET_DOUT","EMC_MOTION_CMD_MSG");

	cms->beginBaseClass("EMC_MOTION_CMD_MSG");
	EMC_MOTION_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_MOTION_CMD_MSG");

	cms->update_with_name("index",index);
	cms->update_with_name("start",start);
	cms->update_with_name("end",end);
	cms->update_with_name("now",now);

	cms->endClass("EMC_MOTION_SET_DOUT","EMC_MOTION_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_MOTION_STAT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1166
*/
void EMC_MOTION_STAT::update(CMS *cms)
{

	cms->beginClass("EMC_MOTION_STAT","EMC_MOTION_STAT_MSG");

	cms->beginBaseClass("EMC_MOTION_STAT_MSG");
	EMC_MOTION_STAT_MSG::update(cms);
	cms->endBaseClass("EMC_MOTION_STAT_MSG");

	cms->beginClassVar("traj");
	traj.update(cms);
	cms->endClassVar("traj");
	for(int i_axis = 0;i_axis < 9 ;i_axis++)
	{
		cms->beginStructArrayElem("axis",i_axis);
		axis[i_axis].update(cms);
		cms->endStructArrayElem("axis",i_axis);
	}
	cms->beginClassVar("spindle");
	spindle.update(cms);
	cms->endClassVar("spindle");
	cms->update_with_name("debug",debug);

	cms->endClass("EMC_MOTION_STAT","EMC_MOTION_STAT_MSG");

}


/*
*	NML/CMS Update function for EMC_MOTION_STAT_MSG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1126
*/
void EMC_MOTION_STAT_MSG::update(CMS *cms)
{

	cms->beginClass("EMC_MOTION_STAT_MSG","RCS_STAT_MSG");

	//RCS_STAT_MSG::update_stat_msg_base(cms);
	cms->update_with_name("heartbeat",heartbeat);

	cms->endClass("EMC_MOTION_STAT_MSG","RCS_STAT_MSG");

}


/*
*	NML/CMS Update function for EMC_NULL
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:111
*/
void EMC_NULL::update(CMS *cms)
{

	cms->beginClass("EMC_NULL","RCS_CMD_MSG");
	RCS_CMD_MSG::update_cmd_msg_base(cms);

	cms->endClass("EMC_NULL","RCS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_OPERATOR_DISPLAY
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:73
*/
void EMC_OPERATOR_DISPLAY::update(CMS *cms)
{

	cms->beginClass("EMC_OPERATOR_DISPLAY","RCS_CMD_MSG");
	RCS_CMD_MSG::update_cmd_msg_base(cms);
	cms->update_with_name("id",id);
	cms->update_with_name("display",display,255);

	cms->endClass("EMC_OPERATOR_DISPLAY","RCS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_OPERATOR_ERROR
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:29
*/
void EMC_OPERATOR_ERROR::update(CMS *cms)
{

	cms->beginClass("EMC_OPERATOR_ERROR","RCS_CMD_MSG");
	RCS_CMD_MSG::update_cmd_msg_base(cms);
	cms->update_with_name("id",id);
	cms->update_with_name("error",error,255);

	cms->endClass("EMC_OPERATOR_ERROR","RCS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_OPERATOR_TEXT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:55
*/
void EMC_OPERATOR_TEXT::update(CMS *cms)
{

	cms->beginClass("EMC_OPERATOR_TEXT","RCS_CMD_MSG");
	RCS_CMD_MSG::update_cmd_msg_base(cms);
	cms->update_with_name("id",id);
	cms->update_with_name("text",text,255);

	cms->endClass("EMC_OPERATOR_TEXT","RCS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_SET_DEBUG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:120
*/
void EMC_SET_DEBUG::update(CMS *cms)
{

	cms->beginClass("EMC_SET_DEBUG","RCS_CMD_MSG");
	RCS_CMD_MSG::update_cmd_msg_base(cms);
	cms->update_with_name("debug",debug);

	cms->endClass("EMC_SET_DEBUG","RCS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_SPINDLE_BRAKE_ENGAGE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1818
*/
void EMC_SPINDLE_BRAKE_ENGAGE::update(CMS *cms)
{

	cms->beginClass("EMC_SPINDLE_BRAKE_ENGAGE","EMC_SPINDLE_CMD_MSG");

	cms->beginBaseClass("EMC_SPINDLE_CMD_MSG");
	EMC_SPINDLE_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_SPINDLE_CMD_MSG");


	cms->endClass("EMC_SPINDLE_BRAKE_ENGAGE","EMC_SPINDLE_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_SPINDLE_BRAKE_RELEASE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1807
*/
void EMC_SPINDLE_BRAKE_RELEASE::update(CMS *cms)
{

	cms->beginClass("EMC_SPINDLE_BRAKE_RELEASE","EMC_SPINDLE_CMD_MSG");

	cms->beginBaseClass("EMC_SPINDLE_CMD_MSG");
	EMC_SPINDLE_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_SPINDLE_CMD_MSG");


	cms->endClass("EMC_SPINDLE_BRAKE_RELEASE","EMC_SPINDLE_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_SPINDLE_CMD_MSG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1694
*/
void EMC_SPINDLE_CMD_MSG::update(CMS *cms)
{

	cms->beginClass("EMC_SPINDLE_CMD_MSG","RCS_CMD_MSG");
	RCS_CMD_MSG::update_cmd_msg_base(cms);

	cms->endClass("EMC_SPINDLE_CMD_MSG","RCS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_SPINDLE_CONSTANT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1794
*/
void EMC_SPINDLE_CONSTANT::update(CMS *cms)
{

	cms->beginClass("EMC_SPINDLE_CONSTANT","EMC_SPINDLE_CMD_MSG");

	cms->beginBaseClass("EMC_SPINDLE_CMD_MSG");
	EMC_SPINDLE_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_SPINDLE_CMD_MSG");

	cms->update_with_name("speed",speed);

	cms->endClass("EMC_SPINDLE_CONSTANT","EMC_SPINDLE_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_SPINDLE_DECREASE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1781
*/
void EMC_SPINDLE_DECREASE::update(CMS *cms)
{

	cms->beginClass("EMC_SPINDLE_DECREASE","EMC_SPINDLE_CMD_MSG");

	cms->beginBaseClass("EMC_SPINDLE_CMD_MSG");
	EMC_SPINDLE_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_SPINDLE_CMD_MSG");

	cms->update_with_name("speed",speed);

	cms->endClass("EMC_SPINDLE_DECREASE","EMC_SPINDLE_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_SPINDLE_INCREASE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1768
*/
void EMC_SPINDLE_INCREASE::update(CMS *cms)
{

	cms->beginClass("EMC_SPINDLE_INCREASE","EMC_SPINDLE_CMD_MSG");

	cms->beginBaseClass("EMC_SPINDLE_CMD_MSG");
	EMC_SPINDLE_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_SPINDLE_CMD_MSG");

	cms->update_with_name("speed",speed);

	cms->endClass("EMC_SPINDLE_INCREASE","EMC_SPINDLE_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_SPINDLE_OFF
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1758
*/
void EMC_SPINDLE_OFF::update(CMS *cms)
{

	cms->beginClass("EMC_SPINDLE_OFF","EMC_SPINDLE_CMD_MSG");

	cms->beginBaseClass("EMC_SPINDLE_CMD_MSG");
	EMC_SPINDLE_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_SPINDLE_CMD_MSG");


	cms->endClass("EMC_SPINDLE_OFF","EMC_SPINDLE_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_SPINDLE_ON
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1742
*/
void EMC_SPINDLE_ON::update(CMS *cms)
{

	cms->beginClass("EMC_SPINDLE_ON","EMC_SPINDLE_CMD_MSG");

	cms->beginBaseClass("EMC_SPINDLE_CMD_MSG");
	EMC_SPINDLE_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_SPINDLE_CMD_MSG");

	cms->update_with_name("speed",speed);
	cms->update_with_name("factor",factor);
	cms->update_with_name("xoffset",xoffset);

	cms->endClass("EMC_SPINDLE_ON","EMC_SPINDLE_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_SPINDLE_ORIENT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1719
*/
void EMC_SPINDLE_ORIENT::update(CMS *cms)
{

	cms->beginClass("EMC_SPINDLE_ORIENT","EMC_SPINDLE_CMD_MSG");

	cms->beginBaseClass("EMC_SPINDLE_CMD_MSG");
	EMC_SPINDLE_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_SPINDLE_CMD_MSG");

	cms->update_with_name("orientation",orientation);
	cms->update_with_name("mode",mode);

	cms->endClass("EMC_SPINDLE_ORIENT","EMC_SPINDLE_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_SPINDLE_SPEED
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1706
*/
void EMC_SPINDLE_SPEED::update(CMS *cms)
{

	cms->beginClass("EMC_SPINDLE_SPEED","EMC_SPINDLE_CMD_MSG");

	cms->beginBaseClass("EMC_SPINDLE_CMD_MSG");
	EMC_SPINDLE_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_SPINDLE_CMD_MSG");

	cms->update_with_name("speed",speed);
	cms->update_with_name("factor",factor);
	cms->update_with_name("xoffset",xoffset);

	cms->endClass("EMC_SPINDLE_SPEED","EMC_SPINDLE_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_SPINDLE_STAT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1150
*/
void EMC_SPINDLE_STAT::update(CMS *cms)
{

	cms->beginClass("EMC_SPINDLE_STAT","EMC_SPINDLE_STAT_MSG");

	cms->beginBaseClass("EMC_SPINDLE_STAT_MSG");
	EMC_SPINDLE_STAT_MSG::update(cms);
	cms->endBaseClass("EMC_SPINDLE_STAT_MSG");

	cms->update_with_name("speed",speed);
	cms->update_with_name("direction",direction);
	cms->update_with_name("brake",brake);
	cms->update_with_name("increasing",increasing);
	cms->update_with_name("enabled",enabled);
	cms->update_with_name("orient_state",orient_state);
	cms->update_with_name("orient_fault",orient_fault);

	cms->endClass("EMC_SPINDLE_STAT","EMC_SPINDLE_STAT_MSG");

}


/*
*	NML/CMS Update function for EMC_SPINDLE_STAT_MSG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1139
*/
void EMC_SPINDLE_STAT_MSG::update(CMS *cms)
{

	cms->beginClass("EMC_SPINDLE_STAT_MSG","RCS_STAT_MSG");

	//RCS_STAT_MSG::update_stat_msg_base(cms);

	cms->endClass("EMC_SPINDLE_STAT_MSG","RCS_STAT_MSG");

}


/*
*	NML/CMS Update function for EMC_SPINDLE_WAIT_ORIENT_COMPLETE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1731
*/
void EMC_SPINDLE_WAIT_ORIENT_COMPLETE::update(CMS *cms)
{

	cms->beginClass("EMC_SPINDLE_WAIT_ORIENT_COMPLETE","EMC_SPINDLE_CMD_MSG");

	cms->beginBaseClass("EMC_SPINDLE_CMD_MSG");
	EMC_SPINDLE_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_SPINDLE_CMD_MSG");

	cms->update_with_name("timeout",timeout);

	cms->endClass("EMC_SPINDLE_WAIT_ORIENT_COMPLETE","EMC_SPINDLE_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_STAT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:2125
*/
void EMC_STAT::update(CMS *cms)
{

	cms->beginClass("EMC_STAT","EMC_STAT_MSG");

	cms->beginBaseClass("EMC_STAT_MSG");
	EMC_STAT_MSG::update(cms);
	cms->endBaseClass("EMC_STAT_MSG");

	cms->beginClassVar("task");
	task.update(cms);
	cms->endClassVar("task");
	cms->beginClassVar("motion");
	motion.update(cms);
	cms->endClassVar("motion");
	cms->beginClassVar("io");
	io.update(cms);
	cms->endClassVar("io");
	cms->update_with_name("debug",debug);

	cms->endClass("EMC_STAT","EMC_STAT_MSG");

}


/*
*	NML/CMS Update function for EMC_STAT_MSG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:2113
*/
void EMC_STAT_MSG::update(CMS *cms)
{

	cms->beginClass("EMC_STAT_MSG","RCS_STAT_MSG");

	RCS_STAT_MSG::update_stat_msg_base(cms);

	cms->endClass("EMC_STAT_MSG","RCS_STAT_MSG");

}


/*
*	NML/CMS Update function for EMC_SYSTEM_CMD
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:95
*/
void EMC_SYSTEM_CMD::update(CMS *cms)
{

	cms->beginClass("EMC_SYSTEM_CMD","RCS_CMD_MSG");
	RCS_CMD_MSG::update_cmd_msg_base(cms);
	cms->update_with_name("string",string,256);

	cms->endClass("EMC_SYSTEM_CMD","RCS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TASK_ABORT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1220
*/
void EMC_TASK_ABORT::update(CMS *cms)
{

	cms->beginClass("EMC_TASK_ABORT","EMC_TASK_CMD_MSG");

	cms->beginBaseClass("EMC_TASK_CMD_MSG");
	EMC_TASK_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TASK_CMD_MSG");


	cms->endClass("EMC_TASK_ABORT","EMC_TASK_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TASK_CMD_MSG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1188
*/
void EMC_TASK_CMD_MSG::update(CMS *cms)
{

	cms->beginClass("EMC_TASK_CMD_MSG","RCS_CMD_MSG");
	RCS_CMD_MSG::update_cmd_msg_base(cms);

	cms->endClass("EMC_TASK_CMD_MSG","RCS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TASK_HALT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1210
*/
void EMC_TASK_HALT::update(CMS *cms)
{

	cms->beginClass("EMC_TASK_HALT","EMC_TASK_CMD_MSG");

	cms->beginBaseClass("EMC_TASK_CMD_MSG");
	EMC_TASK_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TASK_CMD_MSG");


	cms->endClass("EMC_TASK_HALT","EMC_TASK_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TASK_INIT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1200
*/
void EMC_TASK_INIT::update(CMS *cms)
{

	cms->beginClass("EMC_TASK_INIT","EMC_TASK_CMD_MSG");

	cms->beginBaseClass("EMC_TASK_CMD_MSG");
	EMC_TASK_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TASK_CMD_MSG");


	cms->endClass("EMC_TASK_INIT","EMC_TASK_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TASK_PLAN_CLOSE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1342
*/
void EMC_TASK_PLAN_CLOSE::update(CMS *cms)
{

	cms->beginClass("EMC_TASK_PLAN_CLOSE","EMC_TASK_CMD_MSG");

	cms->beginBaseClass("EMC_TASK_CMD_MSG");
	EMC_TASK_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TASK_CMD_MSG");


	cms->endClass("EMC_TASK_PLAN_CLOSE","EMC_TASK_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TASK_PLAN_END
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1332
*/
void EMC_TASK_PLAN_END::update(CMS *cms)
{

	cms->beginClass("EMC_TASK_PLAN_END","EMC_TASK_CMD_MSG");

	cms->beginBaseClass("EMC_TASK_CMD_MSG");
	EMC_TASK_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TASK_CMD_MSG");


	cms->endClass("EMC_TASK_PLAN_END","EMC_TASK_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TASK_PLAN_EXECUTE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1289
*/
void EMC_TASK_PLAN_EXECUTE::update(CMS *cms)
{

	cms->beginClass("EMC_TASK_PLAN_EXECUTE","EMC_TASK_CMD_MSG");

	cms->beginBaseClass("EMC_TASK_CMD_MSG");
	EMC_TASK_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TASK_CMD_MSG");

	cms->update_with_name("command",command,255);

	cms->endClass("EMC_TASK_PLAN_EXECUTE","EMC_TASK_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TASK_PLAN_INIT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1352
*/
void EMC_TASK_PLAN_INIT::update(CMS *cms)
{

	cms->beginClass("EMC_TASK_PLAN_INIT","EMC_TASK_CMD_MSG");

	cms->beginBaseClass("EMC_TASK_CMD_MSG");
	EMC_TASK_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TASK_CMD_MSG");


	cms->endClass("EMC_TASK_PLAN_INIT","EMC_TASK_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TASK_PLAN_OPEN
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1254
*/
void EMC_TASK_PLAN_OPEN::update(CMS *cms)
{

	cms->beginClass("EMC_TASK_PLAN_OPEN","EMC_TASK_CMD_MSG");

	cms->beginBaseClass("EMC_TASK_CMD_MSG");
	EMC_TASK_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TASK_CMD_MSG");

	cms->update_with_name("file",file,255);

	cms->endClass("EMC_TASK_PLAN_OPEN","EMC_TASK_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TASK_PLAN_OPTIONAL_STOP
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1396
*/
void EMC_TASK_PLAN_OPTIONAL_STOP::update(CMS *cms)
{

	cms->beginClass("EMC_TASK_PLAN_OPTIONAL_STOP","EMC_TASK_CMD_MSG");

	cms->beginBaseClass("EMC_TASK_CMD_MSG");
	EMC_TASK_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TASK_CMD_MSG");


	cms->endClass("EMC_TASK_PLAN_OPTIONAL_STOP","EMC_TASK_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TASK_PLAN_PAUSE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1302
*/
void EMC_TASK_PLAN_PAUSE::update(CMS *cms)
{

	cms->beginClass("EMC_TASK_PLAN_PAUSE","EMC_TASK_CMD_MSG");

	cms->beginBaseClass("EMC_TASK_CMD_MSG");
	EMC_TASK_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TASK_CMD_MSG");


	cms->endClass("EMC_TASK_PLAN_PAUSE","EMC_TASK_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TASK_PLAN_READ
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1279
*/
void EMC_TASK_PLAN_READ::update(CMS *cms)
{

	cms->beginClass("EMC_TASK_PLAN_READ","EMC_TASK_CMD_MSG");

	cms->beginBaseClass("EMC_TASK_CMD_MSG");
	EMC_TASK_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TASK_CMD_MSG");


	cms->endClass("EMC_TASK_PLAN_READ","EMC_TASK_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TASK_PLAN_RESUME
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1322
*/
void EMC_TASK_PLAN_RESUME::update(CMS *cms)
{

	cms->beginClass("EMC_TASK_PLAN_RESUME","EMC_TASK_CMD_MSG");

	cms->beginBaseClass("EMC_TASK_CMD_MSG");
	EMC_TASK_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TASK_CMD_MSG");


	cms->endClass("EMC_TASK_PLAN_RESUME","EMC_TASK_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TASK_PLAN_RUN
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1266
*/
void EMC_TASK_PLAN_RUN::update(CMS *cms)
{

	cms->beginClass("EMC_TASK_PLAN_RUN","EMC_TASK_CMD_MSG");

	cms->beginBaseClass("EMC_TASK_CMD_MSG");
	EMC_TASK_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TASK_CMD_MSG");

	cms->update_with_name("line",line);

	cms->endClass("EMC_TASK_PLAN_RUN","EMC_TASK_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TASK_PLAN_SET_BLOCK_DELETE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1384
*/
void EMC_TASK_PLAN_SET_BLOCK_DELETE::update(CMS *cms)
{

	cms->beginClass("EMC_TASK_PLAN_SET_BLOCK_DELETE","EMC_TASK_CMD_MSG");

	cms->beginBaseClass("EMC_TASK_CMD_MSG");
	EMC_TASK_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TASK_CMD_MSG");

	cms->update_with_name("state",state);

	cms->endClass("EMC_TASK_PLAN_SET_BLOCK_DELETE","EMC_TASK_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TASK_PLAN_SET_OPTIONAL_STOP
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1372
*/
void EMC_TASK_PLAN_SET_OPTIONAL_STOP::update(CMS *cms)
{

	cms->beginClass("EMC_TASK_PLAN_SET_OPTIONAL_STOP","EMC_TASK_CMD_MSG");

	cms->beginBaseClass("EMC_TASK_CMD_MSG");
	EMC_TASK_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TASK_CMD_MSG");

	cms->update_with_name("state",state);

	cms->endClass("EMC_TASK_PLAN_SET_OPTIONAL_STOP","EMC_TASK_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TASK_PLAN_STEP
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1312
*/
void EMC_TASK_PLAN_STEP::update(CMS *cms)
{

	cms->beginClass("EMC_TASK_PLAN_STEP","EMC_TASK_CMD_MSG");

	cms->beginBaseClass("EMC_TASK_CMD_MSG");
	EMC_TASK_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TASK_CMD_MSG");


	cms->endClass("EMC_TASK_PLAN_STEP","EMC_TASK_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TASK_PLAN_SYNCH
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1362
*/
void EMC_TASK_PLAN_SYNCH::update(CMS *cms)
{

	cms->beginClass("EMC_TASK_PLAN_SYNCH","EMC_TASK_CMD_MSG");

	cms->beginBaseClass("EMC_TASK_CMD_MSG");
	EMC_TASK_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TASK_CMD_MSG");


	cms->endClass("EMC_TASK_PLAN_SYNCH","EMC_TASK_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TASK_SET_MODE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1230
*/
void EMC_TASK_SET_MODE::update(CMS *cms)
{

	cms->beginClass("EMC_TASK_SET_MODE","EMC_TASK_CMD_MSG");

	cms->beginBaseClass("EMC_TASK_CMD_MSG");
	EMC_TASK_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TASK_CMD_MSG");

	mode= (enum EMC_TASK_MODE_ENUM) cms->update_enumeration_with_name("mode", (int)mode,(void*)&mode,&enum_EMC_TASK_MODE_ENUM_info_struct);

	cms->endClass("EMC_TASK_SET_MODE","EMC_TASK_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TASK_SET_STATE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1242
*/
void EMC_TASK_SET_STATE::update(CMS *cms)
{

	cms->beginClass("EMC_TASK_SET_STATE","EMC_TASK_CMD_MSG");

	cms->beginBaseClass("EMC_TASK_CMD_MSG");
	EMC_TASK_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TASK_CMD_MSG");

	state= (enum EMC_TASK_STATE_ENUM) cms->update_enumeration_with_name("state", (int)state,(void*)&state,&enum_EMC_TASK_STATE_ENUM_info_struct);

	cms->endClass("EMC_TASK_SET_STATE","EMC_TASK_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TASK_STAT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1421
*/
void EMC_TASK_STAT::update(CMS *cms)
{

	cms->beginClass("EMC_TASK_STAT","EMC_TASK_STAT_MSG");

	cms->beginBaseClass("EMC_TASK_STAT_MSG");
	EMC_TASK_STAT_MSG::update(cms);
	cms->endBaseClass("EMC_TASK_STAT_MSG");

	mode= (enum EMC_TASK_MODE_ENUM) cms->update_enumeration_with_name("mode", (int)mode,(void*)&mode,&enum_EMC_TASK_MODE_ENUM_info_struct);
	state= (enum EMC_TASK_STATE_ENUM) cms->update_enumeration_with_name("state", (int)state,(void*)&state,&enum_EMC_TASK_STATE_ENUM_info_struct);
	execState= (enum EMC_TASK_EXEC_ENUM) cms->update_enumeration_with_name("execState", (int)execState,(void*)&execState,&enum_EMC_TASK_EXEC_ENUM_info_struct);
	interpState= (enum EMC_TASK_INTERP_ENUM) cms->update_enumeration_with_name("interpState", (int)interpState,(void*)&interpState,&enum_EMC_TASK_INTERP_ENUM_info_struct);
	cms->update_with_name("motionLine",motionLine);
	cms->update_with_name("currentLine",currentLine);
	cms->update_with_name("readLine",readLine);
	cms->update_with_name("input_timeout",input_timeout);
	cms->update_with_name("file",file,255);
	cms->update_with_name("command",(char *) command,255);
	cms->beginClassVar("g5x_offset");
	nmlupdate(cms,((EmcPose *)&g5x_offset));
	cms->endClassVar("g5x_offset");
	cms->update_with_name("g5x_index",g5x_index);
	cms->beginClassVar("g92_offset");
	nmlupdate(cms,((EmcPose *)&g92_offset));
	cms->endClassVar("g92_offset");
	cms->update_with_name("rotation_xy",rotation_xy);
	cms->beginClassVar("toolOffset");
	nmlupdate(cms,((EmcPose *)&toolOffset));
	cms->endClassVar("toolOffset");
	cms->update_with_name("activeGCodes",(int *) activeGCodes,16);
	cms->update_with_name("activeMCodes",(int *) activeMCodes,10);
	cms->update_with_name("activeSettings",(double *) activeSettings,3);
	cms->update_with_name("programUnits",programUnits);
	cms->update_with_name("interpreter_errcode",interpreter_errcode);

	cms->endClass("EMC_TASK_STAT","EMC_TASK_STAT_MSG");

}


/*
*	NML/CMS Update function for EMC_TASK_STAT_MSG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1407
*/
void EMC_TASK_STAT_MSG::update(CMS *cms)
{

	cms->beginClass("EMC_TASK_STAT_MSG","RCS_STAT_MSG");

	//RCS_STAT_MSG::update_stat_msg_base(cms);
	cms->update_with_name("heartbeat",heartbeat);

	cms->endClass("EMC_TASK_STAT_MSG","RCS_STAT_MSG");

}


/*
*	NML/CMS Update function for EMC_TOOL_ABORT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1498
*/
void EMC_TOOL_ABORT::update(CMS *cms)
{

	cms->beginClass("EMC_TOOL_ABORT","EMC_TOOL_CMD_MSG");

	cms->beginBaseClass("EMC_TOOL_CMD_MSG");
	EMC_TOOL_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TOOL_CMD_MSG");

	cms->update_with_name("reason",reason);

	cms->endClass("EMC_TOOL_ABORT","EMC_TOOL_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TOOL_CMD_MSG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1466
*/
void EMC_TOOL_CMD_MSG::update(CMS *cms)
{

	cms->beginClass("EMC_TOOL_CMD_MSG","RCS_CMD_MSG");
	RCS_CMD_MSG::update_cmd_msg_base(cms);

	cms->endClass("EMC_TOOL_CMD_MSG","RCS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TOOL_HALT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1488
*/
void EMC_TOOL_HALT::update(CMS *cms)
{

	cms->beginClass("EMC_TOOL_HALT","EMC_TOOL_CMD_MSG");

	cms->beginBaseClass("EMC_TOOL_CMD_MSG");
	EMC_TOOL_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TOOL_CMD_MSG");


	cms->endClass("EMC_TOOL_HALT","EMC_TOOL_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TOOL_INIT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1478
*/
void EMC_TOOL_INIT::update(CMS *cms)
{

	cms->beginClass("EMC_TOOL_INIT","EMC_TOOL_CMD_MSG");

	cms->beginBaseClass("EMC_TOOL_CMD_MSG");
	EMC_TOOL_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TOOL_CMD_MSG");


	cms->endClass("EMC_TOOL_INIT","EMC_TOOL_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TOOL_LOAD
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1521
*/
void EMC_TOOL_LOAD::update(CMS *cms)
{

	cms->beginClass("EMC_TOOL_LOAD","EMC_TOOL_CMD_MSG");

	cms->beginBaseClass("EMC_TOOL_CMD_MSG");
	EMC_TOOL_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TOOL_CMD_MSG");


	cms->endClass("EMC_TOOL_LOAD","EMC_TOOL_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TOOL_LOAD_TOOL_TABLE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1541
*/
void EMC_TOOL_LOAD_TOOL_TABLE::update(CMS *cms)
{

	cms->beginClass("EMC_TOOL_LOAD_TOOL_TABLE","EMC_TOOL_CMD_MSG");

	cms->beginBaseClass("EMC_TOOL_CMD_MSG");
	EMC_TOOL_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TOOL_CMD_MSG");

	cms->update_with_name("file",file,255);

	cms->endClass("EMC_TOOL_LOAD_TOOL_TABLE","EMC_TOOL_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TOOL_PREPARE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1509
*/
void EMC_TOOL_PREPARE::update(CMS *cms)
{

	cms->beginClass("EMC_TOOL_PREPARE","EMC_TOOL_CMD_MSG");

	cms->beginBaseClass("EMC_TOOL_CMD_MSG");
	EMC_TOOL_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TOOL_CMD_MSG");

	cms->update_with_name("pocket",pocket);
	cms->update_with_name("tool",tool);

	cms->endClass("EMC_TOOL_PREPARE","EMC_TOOL_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TOOL_SET_NUMBER
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1571
*/
void EMC_TOOL_SET_NUMBER::update(CMS *cms)
{

	cms->beginClass("EMC_TOOL_SET_NUMBER","EMC_TOOL_CMD_MSG");

	cms->beginBaseClass("EMC_TOOL_CMD_MSG");
	EMC_TOOL_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TOOL_CMD_MSG");

	cms->update_with_name("tool",tool);

	cms->endClass("EMC_TOOL_SET_NUMBER","EMC_TOOL_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TOOL_SET_OFFSET
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1553
*/
void EMC_TOOL_SET_OFFSET::update(CMS *cms)
{

	cms->beginClass("EMC_TOOL_SET_OFFSET","EMC_TOOL_CMD_MSG");

	cms->beginBaseClass("EMC_TOOL_CMD_MSG");
	EMC_TOOL_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TOOL_CMD_MSG");

	cms->update_with_name("pocket",pocket);
	cms->update_with_name("toolno",toolno);
	cms->beginClassVar("offset");
	nmlupdate(cms,((EmcPose *)&offset));
	cms->endClassVar("offset");
	cms->update_with_name("diameter",diameter);
	cms->update_with_name("frontangle",frontangle);
	cms->update_with_name("backangle",backangle);
	cms->update_with_name("orientation",orientation);

	cms->endClass("EMC_TOOL_SET_OFFSET","EMC_TOOL_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TOOL_START_CHANGE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1583
*/
void EMC_TOOL_START_CHANGE::update(CMS *cms)
{

	cms->beginClass("EMC_TOOL_START_CHANGE","EMC_TOOL_CMD_MSG");

	cms->beginBaseClass("EMC_TOOL_CMD_MSG");
	EMC_TOOL_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TOOL_CMD_MSG");


	cms->endClass("EMC_TOOL_START_CHANGE","EMC_TOOL_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TOOL_STAT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1603
*/
void EMC_TOOL_STAT::update(CMS *cms)
{

	cms->beginClass("EMC_TOOL_STAT","EMC_TOOL_STAT_MSG");

	cms->beginBaseClass("EMC_TOOL_STAT_MSG");
	EMC_TOOL_STAT_MSG::update(cms);
	cms->endBaseClass("EMC_TOOL_STAT_MSG");

	cms->update_with_name("pocketPrepped",pocketPrepped);
	cms->update_with_name("toolInSpindle",toolInSpindle);
	for(int i_toolTable = 0;i_toolTable < 56 ;i_toolTable++)
	{
		cms->beginStructArrayElem("toolTable",i_toolTable);
		nmlupdate(cms, ( toolTable) + i_toolTable);
		cms->endStructArrayElem("toolTable",i_toolTable);
	}

	cms->endClass("EMC_TOOL_STAT","EMC_TOOL_STAT_MSG");

}


/*
*	NML/CMS Update function for EMC_TOOL_STAT_MSG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1593
*/
void EMC_TOOL_STAT_MSG::update(CMS *cms)
{

	cms->beginClass("EMC_TOOL_STAT_MSG","RCS_STAT_MSG");

	//RCS_STAT_MSG::update_stat_msg_base(cms);

	cms->endClass("EMC_TOOL_STAT_MSG","RCS_STAT_MSG");

}


/*
*	NML/CMS Update function for EMC_TOOL_UNLOAD
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1531
*/
void EMC_TOOL_UNLOAD::update(CMS *cms)
{

	cms->beginClass("EMC_TOOL_UNLOAD","EMC_TOOL_CMD_MSG");

	cms->beginBaseClass("EMC_TOOL_CMD_MSG");
	EMC_TOOL_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TOOL_CMD_MSG");


	cms->endClass("EMC_TOOL_UNLOAD","EMC_TOOL_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_ABORT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:735
*/
void EMC_TRAJ_ABORT::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_ABORT","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");


	cms->endClass("EMC_TRAJ_ABORT","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_CIRCULAR_MOVE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:803
*/
void EMC_TRAJ_CIRCULAR_MOVE::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_CIRCULAR_MOVE","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->beginClassVar("end");
	nmlupdate(cms,((EmcPose *)&end));
	cms->endClassVar("end");
	cms->update_with_name("center",center);
	cms->update_with_name("normal",normal);
	cms->update_with_name("turn",turn);
	cms->update_with_name("type",type);
	cms->update_with_name("vel",vel);
	cms->update_with_name("ini_maxvel",ini_maxvel);
	cms->update_with_name("acc",acc);
	cms->update_with_name("feed_mode",feed_mode);

	cms->endClass("EMC_TRAJ_CIRCULAR_MOVE","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_CLEAR_PROBE_TRIPPED_FLAG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:908
*/
void EMC_TRAJ_CLEAR_PROBE_TRIPPED_FLAG::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_CLEAR_PROBE_TRIPPED_FLAG","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");


	cms->endClass("EMC_TRAJ_CLEAR_PROBE_TRIPPED_FLAG","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_CMD_MSG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:491
*/
void EMC_TRAJ_CMD_MSG::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_CMD_MSG","RCS_CMD_MSG");
	RCS_CMD_MSG::update_cmd_msg_base(cms);

	cms->endClass("EMC_TRAJ_CMD_MSG","RCS_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_DELAY
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:775
*/
void EMC_TRAJ_DELAY::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_DELAY","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->update_with_name("delay",delay);

	cms->endClass("EMC_TRAJ_DELAY","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_DISABLE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:725
*/
void EMC_TRAJ_DISABLE::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_DISABLE","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");


	cms->endClass("EMC_TRAJ_DISABLE","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_ENABLE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:715
*/
void EMC_TRAJ_ENABLE::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_ENABLE","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");


	cms->endClass("EMC_TRAJ_ENABLE","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_HALT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:705
*/
void EMC_TRAJ_HALT::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_HALT","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");


	cms->endClass("EMC_TRAJ_HALT","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_INIT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:695
*/
void EMC_TRAJ_INIT::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_INIT","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");


	cms->endClass("EMC_TRAJ_INIT","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_LINEAR_MOVE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:787
*/
void EMC_TRAJ_LINEAR_MOVE::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_LINEAR_MOVE","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->update_with_name("type",type);
	cms->beginClassVar("end");
	nmlupdate(cms,((EmcPose *)&end));
	cms->endClassVar("end");
	cms->update_with_name("vel",vel);
	cms->update_with_name("ini_maxvel",ini_maxvel);
	cms->update_with_name("acc",acc);
	cms->update_with_name("feed_mode",feed_mode);
	cms->update_with_name("indexrotary",indexrotary);

	cms->endClass("EMC_TRAJ_LINEAR_MOVE","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_PAUSE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:745
*/
void EMC_TRAJ_PAUSE::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_PAUSE","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");


	cms->endClass("EMC_TRAJ_PAUSE","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_PROBE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:945
*/
void EMC_TRAJ_PROBE::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_PROBE","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->beginClassVar("pos");
	nmlupdate(cms,((EmcPose *)&pos));
	cms->endClassVar("pos");
	cms->update_with_name("type",type);
	cms->update_with_name("vel",vel);
	cms->update_with_name("ini_maxvel",ini_maxvel);
	cms->update_with_name("acc",acc);
	cms->update_with_name("probe_type",probe_type);

	cms->endClass("EMC_TRAJ_PROBE","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_RESUME
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:765
*/
void EMC_TRAJ_RESUME::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_RESUME","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");


	cms->endClass("EMC_TRAJ_RESUME","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_RIGID_TAP
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:960
*/
void EMC_TRAJ_RIGID_TAP::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_RIGID_TAP","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->beginClassVar("pos");
	nmlupdate(cms,((EmcPose *)&pos));
	cms->endClassVar("pos");
	cms->update_with_name("vel",vel);
	cms->update_with_name("ini_maxvel",ini_maxvel);
	cms->update_with_name("acc",acc);

	cms->endClass("EMC_TRAJ_RIGID_TAP","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_SET_ACCELERATION
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:571
*/
void EMC_TRAJ_SET_ACCELERATION::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_SET_ACCELERATION","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->update_with_name("acceleration",acceleration);

	cms->endClass("EMC_TRAJ_SET_ACCELERATION","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_SET_AXES
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:521
*/
void EMC_TRAJ_SET_AXES::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_SET_AXES","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->update_with_name("axes",axes);

	cms->endClass("EMC_TRAJ_SET_AXES","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_SET_CYCLE_TIME
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:533
*/
void EMC_TRAJ_SET_CYCLE_TIME::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_SET_CYCLE_TIME","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->update_with_name("cycleTime",cycleTime);

	cms->endClass("EMC_TRAJ_SET_CYCLE_TIME","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_SET_FH_ENABLE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:670
*/
void EMC_TRAJ_SET_FH_ENABLE::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_SET_FH_ENABLE","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->update_with_name("mode",mode);

	cms->endClass("EMC_TRAJ_SET_FH_ENABLE","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_SET_FO_ENABLE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:646
*/
void EMC_TRAJ_SET_FO_ENABLE::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_SET_FO_ENABLE","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->update_with_name("mode",mode);

	cms->endClass("EMC_TRAJ_SET_FO_ENABLE","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_SET_G5X
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:860
*/
void EMC_TRAJ_SET_G5X::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_SET_G5X","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->update_with_name("g5x_index",g5x_index);
	cms->beginClassVar("origin");
	nmlupdate(cms,((EmcPose *)&origin));
	cms->endClassVar("origin");

	cms->endClass("EMC_TRAJ_SET_G5X","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_SET_G92
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:872
*/
void EMC_TRAJ_SET_G92::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_SET_G92","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->beginClassVar("origin");
	nmlupdate(cms,((EmcPose *)&origin));
	cms->endClassVar("origin");

	cms->endClass("EMC_TRAJ_SET_G92","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_SET_HOME
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:896
*/
void EMC_TRAJ_SET_HOME::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_SET_HOME","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->beginClassVar("home");
	nmlupdate(cms,((EmcPose *)&home));
	cms->endClassVar("home");

	cms->endClass("EMC_TRAJ_SET_HOME","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_SET_MAX_ACCELERATION
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:597
*/
void EMC_TRAJ_SET_MAX_ACCELERATION::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_SET_MAX_ACCELERATION","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->update_with_name("acceleration",acceleration);

	cms->endClass("EMC_TRAJ_SET_MAX_ACCELERATION","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_SET_MAX_VELOCITY
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:584
*/
void EMC_TRAJ_SET_MAX_VELOCITY::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_SET_MAX_VELOCITY","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->update_with_name("velocity",velocity);

	cms->endClass("EMC_TRAJ_SET_MAX_VELOCITY","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_SET_MODE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:545
*/
void EMC_TRAJ_SET_MODE::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_SET_MODE","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	mode= (enum EMC_TRAJ_MODE_ENUM) cms->update_enumeration_with_name("mode", (int)mode,(void*)&mode,&enum_EMC_TRAJ_MODE_ENUM_info_struct);

	cms->endClass("EMC_TRAJ_SET_MODE","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_SET_MOTION_ID
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:682
*/
void EMC_TRAJ_SET_MOTION_ID::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_SET_MOTION_ID","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->update_with_name("id",id);

	cms->endClass("EMC_TRAJ_SET_MOTION_ID","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_SET_OFFSET
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:848
*/
void EMC_TRAJ_SET_OFFSET::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_SET_OFFSET","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->beginClassVar("offset");
	nmlupdate(cms,((EmcPose *)&offset));
	cms->endClassVar("offset");

	cms->endClass("EMC_TRAJ_SET_OFFSET","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_SET_RAPID_SCALE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:622
*/
void EMC_TRAJ_SET_RAPID_SCALE::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_SET_RAPID_SCALE","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->update_with_name("scale",scale);

	cms->endClass("EMC_TRAJ_SET_RAPID_SCALE","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_SET_ROTATION
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:884
*/
void EMC_TRAJ_SET_ROTATION::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_SET_ROTATION","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->update_with_name("rotation",rotation);

	cms->endClass("EMC_TRAJ_SET_ROTATION","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_SET_SCALE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:610
*/
void EMC_TRAJ_SET_SCALE::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_SET_SCALE","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->update_with_name("scale",scale);

	cms->endClass("EMC_TRAJ_SET_SCALE","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_SET_SO_ENABLE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:658
*/
void EMC_TRAJ_SET_SO_ENABLE::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_SET_SO_ENABLE","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->update_with_name("mode",mode);

	cms->endClass("EMC_TRAJ_SET_SO_ENABLE","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_SET_SPINDLESYNC
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:837
*/
void EMC_TRAJ_SET_SPINDLESYNC::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_SET_SPINDLESYNC","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->update_with_name("feed_per_revolution",feed_per_revolution);
	cms->update_with_name("velocity_mode",velocity_mode);

	cms->endClass("EMC_TRAJ_SET_SPINDLESYNC","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_SET_SPINDLE_SCALE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:634
*/
void EMC_TRAJ_SET_SPINDLE_SCALE::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_SET_SPINDLE_SCALE","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->update_with_name("scale",scale);

	cms->endClass("EMC_TRAJ_SET_SPINDLE_SCALE","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_SET_TELEOP_ENABLE
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:919
*/
void EMC_TRAJ_SET_TELEOP_ENABLE::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_SET_TELEOP_ENABLE","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->update_with_name("enable",enable);

	cms->endClass("EMC_TRAJ_SET_TELEOP_ENABLE","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_SET_TELEOP_VECTOR
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:932
*/
void EMC_TRAJ_SET_TELEOP_VECTOR::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_SET_TELEOP_VECTOR","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->beginClassVar("vector");
	nmlupdate(cms,((EmcPose *)&vector));
	cms->endClassVar("vector");

	cms->endClass("EMC_TRAJ_SET_TELEOP_VECTOR","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_SET_TERM_COND
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:822
*/
void EMC_TRAJ_SET_TERM_COND::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_SET_TERM_COND","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->update_with_name("cond",cond);
	cms->update_with_name("tolerance",tolerance);

	cms->endClass("EMC_TRAJ_SET_TERM_COND","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_SET_UNITS
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:508
*/
void EMC_TRAJ_SET_UNITS::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_SET_UNITS","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->update_with_name("linearUnits",linearUnits);
	cms->update_with_name("angularUnits",angularUnits);

	cms->endClass("EMC_TRAJ_SET_UNITS","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_SET_VELOCITY
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:557
*/
void EMC_TRAJ_SET_VELOCITY::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_SET_VELOCITY","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");

	cms->update_with_name("velocity",velocity);
	cms->update_with_name("ini_maxvel",ini_maxvel);

	cms->endClass("EMC_TRAJ_SET_VELOCITY","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_STAT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:983
*/
void EMC_TRAJ_STAT::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_STAT","EMC_TRAJ_STAT_MSG");

	cms->beginBaseClass("EMC_TRAJ_STAT_MSG");
	EMC_TRAJ_STAT_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_STAT_MSG");

	cms->update_with_name("linearUnits",linearUnits);
	cms->update_with_name("angularUnits",angularUnits);
	cms->update_with_name("cycleTime",cycleTime);
	cms->update_with_name("axes",axes);
	cms->update_with_name("axis_mask",axis_mask);
	mode= (enum EMC_TRAJ_MODE_ENUM) cms->update_enumeration_with_name("mode", (int)mode,(void*)&mode,&enum_EMC_TRAJ_MODE_ENUM_info_struct);
	cms->update_with_name("enabled",enabled);
	cms->update_with_name("inpos",inpos);
	cms->update_with_name("queue",queue);
	cms->update_with_name("activeQueue",activeQueue);
	cms->update_with_name("queueFull",queueFull);
	cms->update_with_name("id",id);
	cms->update_with_name("paused",paused);
	cms->update_with_name("scale",scale);
	cms->beginClassVar("position");
	nmlupdate(cms,((EmcPose *)&position));
	cms->endClassVar("position");
	cms->beginClassVar("actualPosition");
	nmlupdate(cms,((EmcPose *)&actualPosition));
	cms->endClassVar("actualPosition");
	cms->update_with_name("velocity",velocity);
	cms->update_with_name("acceleration",acceleration);
	cms->update_with_name("maxVelocity",maxVelocity);
	cms->update_with_name("maxAcceleration",maxAcceleration);
	cms->beginClassVar("probedPosition");
	nmlupdate(cms,((EmcPose *)&probedPosition));
	cms->endClassVar("probedPosition");
	cms->update_with_name("probe_tripped",probe_tripped);
	cms->update_with_name("probing",probing);
	cms->update_with_name("probeval",probeval);
	cms->update_with_name("kinematics_type",kinematics_type);
	cms->update_with_name("motion_type",motion_type);

	cms->endClass("EMC_TRAJ_STAT","EMC_TRAJ_STAT_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_STAT_MSG
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:973
*/
void EMC_TRAJ_STAT_MSG::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_STAT_MSG","RCS_STAT_MSG");

	//RCS_STAT_MSG::update_stat_msg_base(cms);

	cms->endClass("EMC_TRAJ_STAT_MSG","RCS_STAT_MSG");

}


/*
*	NML/CMS Update function for EMC_TRAJ_STEP
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:755
*/
void EMC_TRAJ_STEP::update(CMS *cms)
{

	cms->beginClass("EMC_TRAJ_STEP","EMC_TRAJ_CMD_MSG");

	cms->beginBaseClass("EMC_TRAJ_CMD_MSG");
	EMC_TRAJ_CMD_MSG::update(cms);
	cms->endBaseClass("EMC_TRAJ_CMD_MSG");


	cms->endClass("EMC_TRAJ_STEP","EMC_TRAJ_CMD_MSG");

}


/*
*	NML/CMS Update function for EmcPose
*	from /home/leiyang/playground/mk_intf/src/emcpos.h:0
*/
void nmlupdate(CMS *cms,EmcPose *x)
{

	cms->beginClass("EmcPose",0);
	cms->beginClassVar("tran");
	nmlupdate(cms,((PmCartesian *)&(x->tran)));
	cms->endClassVar("tran");
	cms->update_with_name("a",x->a);
	cms->update_with_name("b",x->b);
	cms->update_with_name("c",x->c);
	cms->update_with_name("u",x->u);
	cms->update_with_name("v",x->v);
	cms->update_with_name("w",x->w);

	cms->endClass("EmcPose",0);

}


/*
*	NML/CMS Update function for PLANE_POINT
*	from /home/leiyang/playground/mk_intf/src/depend_struct.hh:29
*/
void nmlupdate(CMS *cms,PLANE_POINT *x)
{

	cms->beginClass("PLANE_POINT",0);
	cms->update_with_name("X",x->X);
	cms->update_with_name("Y",x->Y);

	cms->endClass("PLANE_POINT",0);

}


/*
*	NML/CMS Update function for PmCartesian
*	from :-1
*/
void nmlupdate(CMS *cms,PmCartesian *x)
{

	cms->beginClass("PmCartesian",0);
	cms->update_with_name("x",x->x);
	cms->update_with_name("y",x->y);
	cms->update_with_name("z",x->z);

	cms->endClass("PmCartesian",0);

}

/*
*	Initializer for CANON_TOOL_TABLE
*/
void initialize_CANON_TOOL_TABLE(CANON_TOOL_TABLE* x)
{
	x->toolno = (int) 0;
	x->diameter = (double) 0;
	x->frontangle = (double) 0;
	x->backangle = (double) 0;

}

/*
*	Initializer for CONTROL_POINT
*/
void initialize_CONTROL_POINT(CONTROL_POINT* x)
{
	x->X = (double) 0;
	x->Y = (double) 0;
	x->W = (double) 0;

}

/*
*	Constructor for EMC_AUX_STAT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1684
*/
EMC_AUX_STAT::EMC_AUX_STAT()
	: EMC_AUX_STAT_MSG(EMC_AUX_STAT_TYPE,sizeof(EMC_AUX_STAT))
{
	estop = (int) 0;

}

/*
*	Constructor for EMC_AXIS_STAT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:456
*/
EMC_AXIS_STAT::EMC_AXIS_STAT()
	: EMC_AXIS_STAT_MSG(EMC_AXIS_STAT_TYPE,sizeof(EMC_AXIS_STAT))
{
	axisType = (unsigned char) 0;
	units = (double) 0;
	backlash = (double) 0;
	minPositionLimit = (double) 0;
	maxPositionLimit = (double) 0;
	maxFerror = (double) 0;
	minFerror = (double) 0;
	ferrorCurrent = (double) 0;
	ferrorHighMark = (double) 0;
	output = (double) 0;
	input = (double) 0;
	velocity = (double) 0;
	inpos = (unsigned char) 0;
	homing = (unsigned char) 0;
	homed = (unsigned char) 0;
	fault = (unsigned char) 0;
	enabled = (unsigned char) 0;
	minSoftLimit = (unsigned char) 0;
	maxSoftLimit = (unsigned char) 0;
	minHardLimit = (unsigned char) 0;
	maxHardLimit = (unsigned char) 0;
	overrideLimits = (unsigned char) 0;

}

/*
*	Constructor for EMC_COOLANT_STAT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1894
*/
EMC_COOLANT_STAT::EMC_COOLANT_STAT()
	: EMC_COOLANT_STAT_MSG(EMC_COOLANT_STAT_TYPE,sizeof(EMC_COOLANT_STAT))
{
	mist = (int) 0;
	flood = (int) 0;

}

/*
*	Constructor for EMC_LUBE_STAT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1946
*/
EMC_LUBE_STAT::EMC_LUBE_STAT()
	: EMC_LUBE_STAT_MSG(EMC_LUBE_STAT_TYPE,sizeof(EMC_LUBE_STAT))
{
	on = (int) 0;
	level = (int) 0;

}

/*
*	Constructor for EMC_MOTION_STAT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1166
*/
EMC_MOTION_STAT::EMC_MOTION_STAT()
	: EMC_MOTION_STAT_MSG(EMC_MOTION_STAT_TYPE,sizeof(EMC_MOTION_STAT))
{
	debug = (int) 0;

}

/*
*	Constructor for EMC_SPINDLE_STAT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1150
*/
EMC_SPINDLE_STAT::EMC_SPINDLE_STAT()
	: EMC_SPINDLE_STAT_MSG(EMC_SPINDLE_STAT_TYPE,sizeof(EMC_SPINDLE_STAT))
{
	speed = (double) 0;
	direction = (int) 0;
	brake = (int) 0;
	increasing = (int) 0;
	enabled = (int) 0;
	orient_state = (int) 0;
	orient_fault = (int) 0;

}

/*
*	Constructor for EMC_STAT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:2125
*/
EMC_STAT::EMC_STAT()
	: EMC_STAT_MSG(EMC_STAT_TYPE,sizeof(EMC_STAT))
{
	debug = (int) 0;

}

/*
*	Constructor for EMC_TASK_STAT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1421
*/
EMC_TASK_STAT::EMC_TASK_STAT()
	: EMC_TASK_STAT_MSG(EMC_TASK_STAT_TYPE,sizeof(EMC_TASK_STAT))
{
	mode = (enum EMC_TASK_MODE_ENUM) EMC_TASK_MODE_MANUAL; /*1*/
	state = (enum EMC_TASK_STATE_ENUM) EMC_TASK_STATE_ESTOP; /*1*/
	execState = (enum EMC_TASK_EXEC_ENUM) EMC_TASK_EXEC_WAITING_FOR_SYSTEM_CMD; /*9*/
	interpState = (enum EMC_TASK_INTERP_ENUM) EMC_TASK_INTERP_READING; /*2*/
	motionLine = (int) 0;
	currentLine = (int) 0;
	readLine = (int) 0;
	input_timeout = (bool) 0;
	for(int i_file=0; i_file< 255; i_file++)
	{
		((char*)file)[i_file]  = (char) 0;
	}
	for(int i_command=0; i_command< 255; i_command++)
	{
		((char*)command)[i_command]  = (char) 0;
	}
	g5x_index = (int) 0;
	rotation_xy = (double) 0;
	for(int i_activeGCodes=0; i_activeGCodes< 16; i_activeGCodes++)
	{
		((int*)activeGCodes)[i_activeGCodes]  = (int) 0;
	}
	for(int i_activeMCodes=0; i_activeMCodes< 10; i_activeMCodes++)
	{
		((int*)activeMCodes)[i_activeMCodes]  = (int) 0;
	}
	for(int i_activeSettings=0; i_activeSettings< 3; i_activeSettings++)
	{
		((double*)activeSettings)[i_activeSettings]  = (double) 0;
	}
	programUnits = (int) 0;
	interpreter_errcode = (int) 0;

}

/*
*	Constructor for EMC_TOOL_STAT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:1603
*/
EMC_TOOL_STAT::EMC_TOOL_STAT()
	: EMC_TOOL_STAT_MSG(EMC_TOOL_STAT_TYPE,sizeof(EMC_TOOL_STAT))
{
	pocketPrepped = (int) 0;
	toolInSpindle = (int) 0;
	for(int i_toolTable=0; i_toolTable< 56; i_toolTable++)
	{
		initialize_CANON_TOOL_TABLE(((CANON_TOOL_TABLE*)toolTable)+i_toolTable);
	}

}

/*
*	Constructor for EMC_TRAJ_STAT
*	from /home/leiyang/playground/mk_intf/src/emc_nml.hh:983
*/
EMC_TRAJ_STAT::EMC_TRAJ_STAT()
	: EMC_TRAJ_STAT_MSG(EMC_TRAJ_STAT_TYPE,sizeof(EMC_TRAJ_STAT))
{
	linearUnits = (double) 0;
	angularUnits = (double) 0;
	cycleTime = (double) 0;
	axes = (int) 0;
	axis_mask = (int) 0;
	mode = (enum EMC_TRAJ_MODE_ENUM) EMC_TRAJ_MODE_COORD; /*2*/
	enabled = (bool) 0;
	inpos = (bool) 0;
	queue = (int) 0;
	activeQueue = (int) 0;
	queueFull = (bool) 0;
	id = (int) 0;
	paused = (bool) 0;
	scale = (double) 0;
	velocity = (double) 0;
	acceleration = (double) 0;
	maxVelocity = (double) 0;
	maxAcceleration = (double) 0;
	probe_tripped = (bool) 0;
	probing = (bool) 0;
	probeval = (int) 0;
	kinematics_type = (int) 0;
	motion_type = (int) 0;

}

/*
*	Initializer for EmcPose
*/
void initialize_EmcPose(EmcPose* x)
{
	initialize_PmCartesian( &(x->tran));
	x->a = (double) 0;
	x->b = (double) 0;
	x->c = (double) 0;
	x->u = (double) 0;
	x->v = (double) 0;
	x->w = (double) 0;

}

/*
*	Initializer for PLANE_POINT
*/
void initialize_PLANE_POINT(PLANE_POINT* x)
{
	x->X = (double) 0;
	x->Y = (double) 0;

}

/*
*	Initializer for PmCartesian
*/
void initialize_PmCartesian(PmCartesian* x)
{
	x->x = (double) 0;
	x->y = (double) 0;
	x->z = (double) 0;

}

